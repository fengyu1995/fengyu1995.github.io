<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 常用命令大全</title>
      <link href="/post/8353f4de.html"/>
      <url>/post/8353f4de.html</url>
      
        <content type="html"><![CDATA[<h6 id="1-强制推送（慎用，除非你认为其他冲突等可以丢弃-或者不是很重要）"><a href="#1-强制推送（慎用，除非你认为其他冲突等可以丢弃-或者不是很重要）" class="headerlink" title="1.强制推送（慎用，除非你认为其他冲突等可以丢弃 或者不是很重要）"></a>1.强制推送（慎用，除非你认为其他冲突等可以丢弃 或者不是很重要）</h6><p>git push – force</p><h6 id="2-创建文件等小命令"><a href="#2-创建文件等小命令" class="headerlink" title="2.创建文件等小命令"></a>2.创建文件等小命令</h6><p>touch a &#x2F;&#x2F; 创建一个a文件<br>echo 1234 &gt;&gt; a &#x2F;&#x2F; 把1234这个内容放入a文件<br>cat a &#x2F;&#x2F; 打开a文件 读取出a文件中的内容<br>mkdir test &#x2F;&#x2F; 创建test文件夹<br>rm 文件名 &#x2F;&#x2F; 删除文件<br>pwd &#x2F;&#x2F; 打印当前工作路径</p><h6 id="3-安装git的时候-都会安装git-bash和git-GUI-我们完全也可以使用git-GUI来提交版本-与sourcetree等功能相同"><a href="#3-安装git的时候-都会安装git-bash和git-GUI-我们完全也可以使用git-GUI来提交版本-与sourcetree等功能相同" class="headerlink" title="3.安装git的时候 都会安装git bash和git GUI 我们完全也可以使用git GUI来提交版本 与sourcetree等功能相同"></a>3.安装git的时候 都会安装git bash和git GUI 我们完全也可以使用git GUI来提交版本 与sourcetree等功能相同</h6><p>gitk &#x2F;&#x2F; 用git命令快速打开git GUI</p><h6 id="4-文件信息"><a href="#4-文件信息" class="headerlink" title="4.文件信息"></a>4.文件信息</h6><p>ls &#x2F;&#x2F; 查看当前路径下面的所有文件名<br>ls 文件夹名 &#x2F;&#x2F; 查看对应文件夹中的内容<br>ls -l &#x2F;&#x2F; 拉出最近git提交记录以及对应修改的文件名<br>ls -l -a &#x2F;&#x2F; 拉出最近git提交记录以及对应修改的文件名，隐藏的文件也会显示</p><h6 id="5-cd快速切换路径"><a href="#5-cd快速切换路径" class="headerlink" title="5.cd快速切换路径"></a>5.cd快速切换路径</h6><p>cd ~ &#x2F;&#x2F; 将工作路径快速切换到root<br>cd - &#x2F;&#x2F; 将工作路径切换到上一状态<br>cd ..&#x2F; &#x2F;&#x2F; 切回到上一个工作路径<br>cd 文件夹名 &#x2F;&#x2F; 进入某个目录<br>cd &#x2F; &#x2F;&#x2F; 进入根目录</p><h6 id="6-vim模式"><a href="#6-vim模式" class="headerlink" title="6.vim模式"></a>6.vim模式</h6><p>vim 文件名 &#x2F;&#x2F; 新建一个文件<br>i 插入内容<br>按下esc :wq 保存并退出<br>按下esc :q 直接退出<br>vim 模式下 文件中#号开头的为注释<br>.project 忽略.project文件<br>*.obj 或者 *.exe 忽略一类文件 例如以.obj .exe 结尾的文件</p><p>git check-ignore -v .project 查看ignore中.project的位置</p><h6 id="7-常用git-命令"><a href="#7-常用git-命令" class="headerlink" title="7.常用git 命令"></a>7.常用git 命令</h6><p>git init &#x2F;&#x2F; 初始化 在工作路径上创建主分支<br>git clone 地址 &#x2F;&#x2F; 克隆远程仓库<br>git clone -b 分支名 地址 &#x2F;&#x2F; 克隆分支的代码到本地<br>git status &#x2F;&#x2F; 查看状态<br>git add 文件名 &#x2F;&#x2F; 将某个文件存入暂存区<br>git checkout – file &#x2F;&#x2F; 撤销工作区的修改 例如git checkout – readMe.txt 将本次readMe.txt在工作区的修改撤销掉<br>git add b c &#x2F;&#x2F;把b和c存入暂存区<br>git add . &#x2F;&#x2F; 将所有文件提交到暂存区<br>git add -p 文件名 &#x2F;&#x2F; 一个文件分多次提交<br>git stash -u -k &#x2F;&#x2F; 提交部分文件内容 到仓库 例如本地有3个文件 a b c 只想提交a b到远程仓库 git add a b 然后 git stash -u -k 再然后git commit -m “备注信息” 然后再push push之后 git stash pop 把之前放入堆栈的c拿出来 继续下一波操作<br>git commit -m “提交的备注信息”  &#x2F;&#x2F; 提交到仓库<br>若已经有若干文件放入仓库，再次提交可以不用git add和git commit -m “备注信息” 这2步， 直接用<br>git commit -am “备注信息” &#x2F;&#x2F; 将内容放至仓库 也可用git commit -a -m “备注信息”</p><ul><li><p>git commit中的备注信息尽量完善 养成良好提交习惯 例如 git commit -m “变更(范围)：变更的内容”</p><h6 id="8-存储密码凭证-设置别名-获取config信息以及配置"><a href="#8-存储密码凭证-设置别名-获取config信息以及配置" class="headerlink" title="8.存储密码凭证 设置别名 获取config信息以及配置"></a>8.存储密码凭证 设置别名 获取config信息以及配置</h6></li></ul><p>git config –list &#x2F;&#x2F; 获取config信息<br>git config –global core.safecrlf false &#x2F;&#x2F; 去掉git add 命令后 出现的一堆CR LF提示信息<br>其中CR是回车的意思 LF是换行<br>git config –global user.name”your name” &#x2F;&#x2F; 设置username<br>git config –global user.email”<a href="mailto:&#x79;&#x6f;&#x75;&#114;&#x5f;&#x65;&#109;&#x61;&#x69;&#x6c;&#x40;&#121;&#111;&#117;&#x72;&#101;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x79;&#x6f;&#x75;&#114;&#x5f;&#x65;&#109;&#x61;&#x69;&#x6c;&#x40;&#121;&#111;&#117;&#x72;&#101;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a>“ &#x2F;&#x2F; 设置邮箱<br>git config –global credential.helper wincred &#x2F;&#x2F; 存储凭证 (可用于输入一次用户密码后，不再输入 有时我们已经用SSH key 绑定关联好了 但是每次git提交的时候 还是需要你输入用户名密码 在这个时候 敲入这个命令 将凭证存储起来 用户名密码就不需要再次输入了)<br>git config –global alias.ci commit &#x2F;&#x2F; 将commit命令设置别名ci git commit命令将由git ci来代替</p><h6 id="9-查看git常用命令"><a href="#9-查看git常用命令" class="headerlink" title="9.查看git常用命令"></a>9.查看git常用命令</h6><p>git helper -a &#x2F;&#x2F; 查看全部git子命令</p><h6 id="10-逐行查看文件的修改历史"><a href="#10-逐行查看文件的修改历史" class="headerlink" title="10.逐行查看文件的修改历史"></a>10.逐行查看文件的修改历史</h6><p>git blame 文件名 &#x2F;&#x2F; 查看该文件的修改历史<br>git blame -L 100,10 文件名 &#x2F;&#x2F; 从100行开始，到110行 逐行查看文件的修改历史</p><h6 id="11-清除"><a href="#11-清除" class="headerlink" title="11.清除"></a>11.清除</h6><p>git clean -n &#x2F;&#x2F; 列出打算清除的档案(首先会对工作区的内容进行提示)<br>git clean -f &#x2F;&#x2F; 真正的删除<br>git clean -x -f &#x2F;&#x2F; 连.gitignore中忽略的档案也删除<br>git status -sb (sb是 short branch) &#x2F;&#x2F; 简洁的输出git status中的信息</p><h6 id="12-删除放入暂存区文件的方法（已commit后）"><a href="#12-删除放入暂存区文件的方法（已commit后）" class="headerlink" title="12.删除放入暂存区文件的方法（已commit后）"></a>12.删除放入暂存区文件的方法（已commit后）</h6><p>git rm 文件名 &#x2F;&#x2F; 将该文件从commit后撤回到add后<br>git reset HEAD^ –hard &#x2F;&#x2F; 删除后 可以用git rm 文件名再回撤一步</p><h6 id="13-修改文件名以及移动"><a href="#13-修改文件名以及移动" class="headerlink" title="13.修改文件名以及移动"></a>13.修改文件名以及移动</h6><p>git mv a b &#x2F;&#x2F; 把a文件名字改成b 并且直接放入git add后的暂存区<br>git mv b .&#x2F;demos&#x2F; &#x2F;&#x2F; 把b文件移动到demos文件夹下</p><h6 id="14-对比工作区，暂存区，仓库的差异"><a href="#14-对比工作区，暂存区，仓库的差异" class="headerlink" title="14.对比工作区，暂存区，仓库的差异"></a>14.对比工作区，暂存区，仓库的差异</h6><p>git diff &#x2F;&#x2F; 查看变更 工作区与暂存区的差异比对<br>git diff –cached &#x2F;&#x2F; 暂存区与提交版本的差异<br>git diff HEAD &#x2F;&#x2F; 工作区与仓库中最后一次提交版本的差别<br>git diff 版本哈希值 版本哈希值 &#x2F;&#x2F; 查看这2个版本哈希之间的区别<br>或者 git diff HEAD<del>数字 HEAD</del>数字</p><p>git diff tt 就是倒数第5个版本与第一个版本之间的差异<br>git diff –cached tt 暂存区与倒数第5个版本之间的比对</p><h6 id="15-查看提交信息"><a href="#15-查看提交信息" class="headerlink" title="15.查看提交信息"></a>15.查看提交信息</h6><p>git show HEAD &#x2F;&#x2F; 查看最后一次提交修改的详细信息 也可以用git show 哈希值 查看对应的内容<br>git show HEAD^ &#x2F;&#x2F; 查看倒数第二次的提交修改详细信息<br>git show HEAD^^ 或者git show HEAD~2 查看前2次变更<br>git show HEAD 或 git show 哈希值 或者git show tag(标签名) 都可以查看最近一次提交的详细信息</p><h6 id="16-查看信息"><a href="#16-查看信息" class="headerlink" title="16.查看信息"></a>16.查看信息</h6><p>git log –pretty&#x3D;format:’%h %ad | %s%d [%an]’ –graph –date&#x3D;short<br>&#x2F;&#x2F; 获取git log里的树形详细信息 包括hasg 日期 提交信息 提交人等<br>git log –oneline &#x2F;&#x2F;拉出所有提交信息 q是退出<br>git log -5 &#x2F;&#x2F; 查看前5次的提交记录<br>git log –oneline -5 &#x2F;&#x2F; 打印出的日志里面只有哈希值和修改的内容备注<br>git log 文件名 &#x2F;&#x2F; 查看该文件的提交<br>git log –grep &#x2F;&#x2F; 想过滤看到的内容   过滤日志<br>git log -n &#x2F;&#x2F; 查看近期提交的n条信息内容<br>git log -p &#x2F;&#x2F; 查看详细提交记录</p><h6 id="17-变基操作，改写历史提交-把多次提交合并起来"><a href="#17-变基操作，改写历史提交-把多次提交合并起来" class="headerlink" title="17.变基操作，改写历史提交 把多次提交合并起来"></a>17.变基操作，改写历史提交 把多次提交合并起来</h6><p>git rebase -i HEAD~3 变基之后的哈希值与之前的不同 证明变基是重新做的提交 把多次提交合并成了几次提交</p><h6 id="18-回撤操作"><a href="#18-回撤操作" class="headerlink" title="18.回撤操作"></a>18.回撤操作</h6><p>git commit –amend -m “提交信息” &#x2F;&#x2F; 回撤上一次提交并与本次工作区一起提交<br>git reset HEAD<del>2 –hard &#x2F;&#x2F; 回撤2步<br>git reset –files &#x2F;&#x2F; 从仓库回撤到暂存区<br>git reset HEAD &#x2F;&#x2F; 回撤暂存区内容到工作目录<br>git reset HEAD –soft 回撤提交到暂存区<br>git reset HEAD –hard &#x2F;&#x2F; 回撤提交 放弃变更 (慎用)<br>git reset HEAD^  &#x2F;&#x2F; 回撤仓库最后一次提交<br>git reset –soft HEAD^ &#x2F;&#x2F; 将执行git commit 并没有执行git push到远程仓库的内容 回撤到工作区 并且保存在工作区<br>git reset –hard HEAD^ &#x2F;&#x2F; 将执行git commit 并没有执行git push到远程仓库的内容 回撤并且不保存<br>&#x2F;&#x2F; 注意 在window电脑端 可能会出现执行git reset –hard HEAD^命令时 提示More? 所以针对windows 我们回撤内容需要键入git reset –hard HEAD^^才可以 如果我们git commit提交2次 想把2次都回撤到工作区保存 可以使用git reset –soft HEAD</del>2<br>git reset –hard commitid &#x2F;&#x2F; 回撤到该次提交id的位置 回撤后本地暂存区可能有内容 本地仓库有要同步的内容 此时 丢弃掉暂存区的内容 并且强制将本地的内容推送至远程仓库 执行下面的命令 git push -u -f origin 分支名 这样就可以完全回撤到提交id的位置<br>git reset –soft commitid &#x2F;&#x2F; 回撤到该次提交id的位置 并将回撤内容保存在暂存区<br>git push -f -u origin 分支名 所有内容都回撤完了 将回撤后的操作强制推送到远程分支<br>git push origin&#x2F;分支名 –force 强制将本地回撤后的操作 强制推送到远程分支</p><h6 id="19-标签操作"><a href="#19-标签操作" class="headerlink" title="19.标签操作"></a>19.标签操作</h6><p>git tag &#x2F;&#x2F; 查看列出所有打过的标签名 例如V1.1 V1.11 V1.12 V1.13等<br>git tag -d 标签名 &#x2F;&#x2F; 删除对应标签 只是删除了本地的<br>git push origin :refs&#x2F;tags&#x2F;远程标签名 &#x2F;&#x2F; 删除远程仓库的标签 可以在删除本地标签后 执行这个操作 同步远程<br>git tag 标签名字 &#x2F;&#x2F; 在当前仓库打个标签<br>git tag 标签名 commitid &#x2F;&#x2F; 给已知提交id的版本打标签 例如git tag v1.1.1 6f8f25fcf57a17e6c72b33f6bca0797fab15ff8b &#x2F;&#x2F; 给历史提交打V1.1.1的tag标签 这里的commitid可以缩写 缩写成前6位就可以 例如git tag V1.1.1 6f8f25 一样可以给这个提交id打上tag<br>git tag -l &#x2F;&#x2F; 过滤tag 例如 git tag -l “V1.1*” &#x2F;&#x2F; V1.1 V1.11 可以过滤前面是V1.1开头的内容<br>git show 标签名称 &#x2F;&#x2F; 查看tag的详细信息 包括commitid 作者信息 日期 内容<br>git push origin 标签名称 &#x2F;&#x2F; 同步这个tag到远程服务器 默认tag是打在本地的 这个命令可以把它推到远程<br>git push origin –tags &#x2F;&#x2F; 将本地所有tag推送到远程服务器<br>git pull –tags &#x2F;&#x2F; 把远程仓库的标签也拉取下来<br>git tag foo -m “message” &#x2F;&#x2F; 在当前提交上，打标签foo 并给message信息注释<br>git tag 标签名 哈希值 -m “message” &#x2F;&#x2F; 在某个哈希值上打标签并且写上标签的信息<br>git tag foo HEAD~4 &#x2F;&#x2F; 在当前提交之前的第4个版本上 打标签foo</p><p>git stash &#x2F;&#x2F; 把暂存区的内容 暂时放在其他中 使暂存区变空<br>git stash list &#x2F;&#x2F; 查看stash了哪些存储<br>git stash pop &#x2F;&#x2F; 将stash中的内容恢复到当前目录，将缓存堆栈中的对应stash删除<br>git stash apply &#x2F;&#x2F; 将stash中的内容恢复到当前目录，不会将缓存堆栈中的对应stash删除<br>git stash clear &#x2F;&#x2F; 删除所有缓存的stash<br>git reset –hard &#x2F;&#x2F; 回撤git stash pop的内容</p><h6 id="20-分支"><a href="#20-分支" class="headerlink" title="20.分支"></a>20.分支</h6><p>git branch 分支名 &#x2F;&#x2F; 新建分支<br>git branch &#x2F;&#x2F; 查看当前所有分支<br>git checkout 分支名 &#x2F;&#x2F; 检出分支<br>git checkout -b 分支名 &#x2F;&#x2F; 创建并切换分支<br>git checkout commitId 文件名（文件路径下的文件名） 还原这个文件到对应的commitId的版本<br>（例如src&#x2F;page&#x2F;attendance&#x2F;attendanceSum.vue我想把它还原到2个版本之前 首先git log src&#x2F;page&#x2F;attendance&#x2F;attendanceSum.vue找到对应想要还原的版本<br>复制版本提交的commitID 然后执行git checkout commitID src&#x2F;page&#x2F;attendance&#x2F;attendanceSum.vue<br>这样就把attendanceSum.vue这个单个文件 还原到了对应版本）<br>git branch -v &#x2F;&#x2F; 查看分支以及提交hash值和commit信息<br>git merge 分支名 &#x2F;&#x2F; 把该分支的内容合并到现有分支上<br>git cherry-pick commitId &#x2F;&#x2F; 把其他分支的某一次提交内容合并到当前分支 这个在我们平时多分支开发中很常用<br>git branch -d 分支名 &#x2F;&#x2F; 删除分支<br>git branch -D 分支名 &#x2F;&#x2F; 强制删除 若没有其他分支合并就删除 d会提示 D不会<br>git branch -m 旧分支名 新分支名 &#x2F;&#x2F; 修改分支名<br>git branch -M 旧分支名 新分支名 &#x2F;&#x2F; 修改分支名 M强制修改 若与其他分支有冲突也会创建(慎用)<br>git branch -r &#x2F;&#x2F; 列出远程分支(远程所有分支名)<br>git branch -a &#x2F;&#x2F; 查看远程分支(列出远程分支以及本地分支名 远程分支会以remote&#x2F;origin&#x2F;分支名这种形式展示 红色标识)<br>git branch &#x2F;&#x2F; 查看本地分支<br>git reflog show –date&#x3D;iso <branch name> &#x2F;&#x2F; 查看分支创建时间 例如git reflog show –date&#x3D;iso origin&#x2F;feature-PCDEC-6375 输出 88e22885 (HEAD -&gt; feature-PCDEC-6375, origin&#x2F;feature-PCDEC-6375, origin&#x2F;EC-master, EC-master) refs&#x2F;remotes&#x2F;origin&#x2F;feature-PCDEC-6375@{2021-07-27 11:31:23 +0800}: fetch: storing head 创建时间就是2021-07-27 11:31:23<br>git fetch &#x2F;&#x2F; 更新remote索引<br>git push -u origin 分支名 &#x2F;&#x2F; 将本地分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push 也可解决 git建立远程分支关联时出现fatal … upstram的问题<br>git push origin –delete 分支名 (将git branch -D 分支名 删掉的分支 同步到远程主机 将origin&#x2F;分支名的该分支也删除掉)<br>git remote show origin 查看remote地址，远程分支，还有本地分支与之相对应关系等信息(结合git branch -a使用)<br>git remote prune origin 删除远程仓库不存在的分支 (git branch -a使用)<br>git reflog show –date&#x3D;iso 分支名 &#x2F;&#x2F; 查看指定分支的创建时间 以及更改记录等</p><h6 id="21-git仓库迁移"><a href="#21-git仓库迁移" class="headerlink" title="21.git仓库迁移"></a>21.git仓库迁移</h6><p>&#x2F;&#x2F; 首先在当前项目主分支先执行git pull 把代码更新为最新<br>git remote set-url origin &lt;新的仓库名&gt;<br>git push -u -f origin<br>git push -u -f origin –all &#x2F;&#x2F; 把所有分支迁移过去<br>git push -u -f origin –tags &#x2F;&#x2F; 把所有tag迁移过去<br>&#x2F;&#x2F; 然后去拉取新的仓库代码就可以了 如果新仓库之前拉取过了</p><p>原文链接：<a href="https://blog.csdn.net/qq_38111015/article/details/84885809">https://blog.csdn.net/qq_38111015/article/details/84885809</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARPG相机</title>
      <link href="/post/34a2bdf1.html"/>
      <url>/post/34a2bdf1.html</url>
      
        <content type="html"><![CDATA[<p>ARPG相机</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************摄像机*************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ARPGcamera</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Transform target;</span><br><span class="line">    <span class="comment">//public string targetname = &quot;zhujue(Clone)&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> targetHeight = <span class="number">1.2f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> distance = <span class="number">4.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> maxDistance = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> minDistance = <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> xSpeed = <span class="number">250.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> ySpeed = <span class="number">120.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> yMinLimit = <span class="number">-10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> yMaxLimit = <span class="number">70</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> zoomRate = <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> rotationDampening = <span class="number">3.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> x = <span class="number">20.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> y = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> Quaternion aim;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> aimAngle = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> angles = transform.eulerAngles;</span><br><span class="line">        x = angles.y;</span><br><span class="line">        y = angles.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            x += Input.GetAxis(<span class="string">&quot;Mouse X&quot;</span>) * xSpeed * <span class="number">0.02f</span>;</span><br><span class="line">            y -= Input.GetAxis(<span class="string">&quot;Mouse Y&quot;</span>) * ySpeed * <span class="number">0.02f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        distance -= (Input.GetAxis(<span class="string">&quot;Mouse ScrollWheel&quot;</span>) * Time.deltaTime) * zoomRate * Mathf.Abs(distance);</span><br><span class="line">        distance = Mathf.Clamp(distance, minDistance, maxDistance);</span><br><span class="line">        y = ClampAngle(y, yMinLimit, yMaxLimit);</span><br><span class="line">        Quaternion rotation = Quaternion.Euler(y, x, <span class="number">0</span>);</span><br><span class="line">        transform.rotation = rotation;</span><br><span class="line">        aim = Quaternion.Euler(y - aimAngle, x, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        Vector3 position = target.position - (rotation * Vector3.forward * distance + <span class="keyword">new</span> Vector3(<span class="number">0</span>, -targetHeight, <span class="number">0</span>));</span><br><span class="line">        transform.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">float</span> <span class="title">ClampAngle</span>(<span class="params"><span class="built_in">float</span> angle, <span class="built_in">float</span> min, <span class="built_in">float</span> max</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (angle &lt; <span class="number">-360</span>)</span><br><span class="line">            angle += <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">if</span> (angle &gt; <span class="number">360</span>)</span><br><span class="line">            angle -= <span class="number">360</span>;</span><br><span class="line">        <span class="keyword">return</span> Mathf.Clamp(angle, min, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间戳</title>
      <link href="/post/5e51f5d.html"/>
      <url>/post/5e51f5d.html</url>
      
        <content type="html"><![CDATA[<p>时间戳</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 时间戳</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimeHelp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetTimeStamp</span>(<span class="params">System.DateTime time, <span class="built_in">int</span> length = <span class="number">13</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">long</span> ts = ConvertDateTimeToInt(time);</span><br><span class="line">        <span class="keyword">return</span> ts.ToString().Substring(<span class="number">0</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 将c# DateTime时间格式转换为Unix时间戳格式  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;time&quot;&gt;</span>时间<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>long<span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">ConvertDateTimeToInt</span>(<span class="params">System.DateTime time</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(<span class="keyword">new</span> System.DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">long</span> t = (time.Ticks - startTime.Ticks) / <span class="number">10000</span>;   <span class="comment">//除10000调整为13位      </span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 时间戳转为C#格式时间        </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=”timeStamp”&gt;</span><span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span>        </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateTime <span class="title">ConvertStringToDateTime</span>(<span class="params"><span class="built_in">string</span> timeStamp</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DateTime dtStart = TimeZone.CurrentTimeZone.ToLocalTime(<span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">long</span> lTime = <span class="built_in">long</span>.Parse(timeStamp + <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">        TimeSpan toNow = <span class="keyword">new</span> TimeSpan(lTime);</span><br><span class="line">        <span class="keyword">return</span> dtStart.Add(toNow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 时间戳转为C#格式时间10位</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeStamp&quot;&gt;</span>Unix时间戳格式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>C#格式时间<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateTime <span class="title">GetDateTimeFrom1970Ticks</span>(<span class="params"><span class="built_in">long</span> curSeconds</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DateTime dtStart = TimeZone.CurrentTimeZone.ToLocalTime(<span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> dtStart.AddSeconds(curSeconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 验证时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;time&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;interval&quot;&gt;</span>差值（分钟）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsTime</span>(<span class="params"><span class="built_in">long</span> time, <span class="built_in">double</span> interval</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DateTime dt = GetDateTimeFrom1970Ticks(time);</span><br><span class="line">        <span class="comment">//取现在时间</span></span><br><span class="line">        DateTime dt1 = DateTime.Now.AddMinutes(interval);</span><br><span class="line">        DateTime dt2 = DateTime.Now.AddMinutes(interval * <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (dt &gt; dt2 &amp;&amp; dt &lt; dt1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断时间戳是否正确（验证前8位）</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;time&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsTime</span>(<span class="params"><span class="built_in">string</span> time</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str = GetTimeStamp(DateTime.Now, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">if</span> (str.Equals(time))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#调用windows API的一些方法</title>
      <link href="/post/fffd1735.html"/>
      <url>/post/fffd1735.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/benwu/p/4132026.html"><strong>C#调用windows API的一些方法</strong></a></p><p><strong>使用C#调用windows API（从其它地方总结来的，以备查询）</strong></p><p>C#调用windows API也可以叫做C#如何直接调用非托管代码，通常有2种方法：</p><p>1．  直接调用从 DLL 导出的函数。</p><p>2．  调用 COM 对象上的接口方法</p><p>我主要讨论从dll中导出函数，基本步骤如下：</p><p>1．使用 C# 关键字 <strong>static</strong> 和 <strong>extern</strong> 声明方法。</p><p>2．将 <strong>DllImport</strong> 属性附加到该方法。<strong>DllImport</strong> 属性允许您指定包含该方法的 DLL 的名称。</p><p>3．如果需要，为方法的参数和返回值指定自定义封送处理信息，这将重写 .NET Framework 的默认封送处理。</p><p>1．首先我们查询MSDN找到GetShortPathName的原型定义</p><p><strong>DWORD</strong> <strong>GetShortPathName(</strong></p><p>  <strong>LPCTSTR</strong> <em>lpszLongPath</em><strong>,</strong></p><p>  <strong>LPTSTR</strong> <em>lpszShortPath</em><strong>,</strong></p><p>  <strong>DWORD</strong> <em>cchBuffer</em></p><p><strong>);</strong></p><p>2．查找对照表进行数据类型的转换（出处：<a href="http://msdn.microsoft.com/msdnmag/issues/03/07/NET/default.aspx?fig=true">http://msdn.microsoft.com/msdnmag/issues/03/07/NET/default.aspx?fig=true</a>  <strong>）</strong>Data</p><table><thead><tr><th><strong>Win32 Types</strong></th><th><strong>Specification</strong></th><th><strong>CLR Type</strong></th></tr></thead><tbody><tr><td>char, INT8, SBYTE, CHARâ€</td><td>8-bit signed integer</td><td>System.SByte</td></tr><tr><td>short, short int, INT16, SHORT</td><td>16-bit signed integer</td><td>System.Int16</td></tr><tr><td>int, long, long int, INT32, LONG32, BOOLâ€ , INT</td><td>32-bit signed integer</td><td>System.Int32</td></tr><tr><td>__int64, INT64, LONGLONG</td><td>64-bit signed integer</td><td>System.Int64</td></tr><tr><td>unsigned char, UINT8, UCHARâ€ , BYTE</td><td>8-bit unsigned integer</td><td>System.Byte</td></tr><tr><td>unsigned short, UINT16, USHORT, WORD, ATOM, WCHARâ€ , __wchar_t</td><td>16-bit unsigned integer</td><td>System.UInt16</td></tr><tr><td>unsigned, unsigned int, UINT32, ULONG32, DWORD32, ULONG, DWORD, UINT</td><td>32-bit unsigned integer</td><td>System.UInt32</td></tr><tr><td>unsigned __int64, UINT64, DWORDLONG, ULONGLONG</td><td>64-bit unsigned integer</td><td>System.UInt64</td></tr><tr><td>float, FLOAT</td><td>Single-precision floating point</td><td>System.Single</td></tr><tr><td>double, long double, DOUBLE</td><td>Double-precision floating point</td><td>System.Double</td></tr><tr><td>â€ In Win32 this type is an integer with a specially assigned meaning; in contrast, the CLR provides a specific type devoted to this meaning.</td><td></td><td></td></tr></tbody></table><p>3．调用GetShortPathName这个API，简单的写法如下（编译通过的话），</p><p>using System;</p><p>using <em>System.Runtime.InteropServices;</em></p><p>​    public class MSSQL_ServerHandler</p><p>​    {</p><p>​        [<em>DllImport</em>(“kernel32.dll”)]</p><p>​        public <em>static extern</em> int GetShortPathName</p><p>​        (</p><p>​            string path,</p><p>​            StringBuilder shortPath,</p><p>​            int shortPathLength</p><p>)</p><p>​     }</p><p>而我们之前的例子：</p><p>using System;</p><p>using System.Runtime.InteropServices;</p><p>​    public class MSSQL_ServerHandler</p><p>​    {</p><p>​        [DllImport(“kernel32.dll”, CharSet &#x3D; CharSet.Auto)]</p><p>​        public static extern int GetShortPathName</p><p>​        (</p><p>​            [MarshalAs(UnmanagedType.LPTStr)] string path,</p><p>​            [MarshalAs(UnmanagedType.LPTStr)] StringBuilder shortPath,</p><p>​            int shortPathLength</p><p>)</p><p>​     }</p><p>对比可知，其中DllImport ，static，extern基本上是必须有的，其他CharSet，MarshalAs（…）是可选项，在这里即使没有，程序也是可以调用此API了。</p><p>说明：</p><p>1．MSSQL_ServerHandler. GetShortPathName 方法用 <strong>static</strong> 和 <strong>extern</strong> 修饰符声明并且具有 <strong>DllImport</strong> 属性，该属性使用默认名称GetShortPathName 通知编译器此实现来自kernel32.dll。若要对 C# 方法使用不同的名称（如 getShort），则必须在 <strong>DllImport</strong> 属性中使用 <strong>EntryPoint</strong> 选项，如下所示：</p><p><strong>[DllImport(“kernel32.dll”, EntryPoint&#x3D;”getShort”)]</strong></p><p><strong>2．</strong>使用MarshalAs(UnmanagedType.LPTStr)保证了在任何平台上都会得到LPTStr，否则默认的方式会把从C#中的字符串作为BStr传递。</p><p>现在如果是仅含有简单参数和返回值的WIN32 API，就都可以利用这种方法进行对照，简单的改写和调用了。</p><p><strong>二．背后的原理 ―― 知其所以然，相关的知识</strong></p><p> <strong>1．平台调用详原理</strong></p><p>平台调用依赖于元数据在运行时查找导出的函数并封送其参数。下图显示了这一过程。</p><p>对非托管 DLL 函数的“平台调用”调用</p><p>当“平台调用”调用非托管函数时，它将依次执行以下操作：</p><p>查找包含该函数的 DLL。</p><p>将该 DLL 加载到内存中。</p><p>查找函数在内存中的地址并将其参数推到堆栈上，以封送所需的数据。</p><p><strong>注意</strong>   只在第一次调用函数时，才会查找和加载 DLL 并查找函数在内存中的地址。</p><p>将控制权转移给非托管函数。</p><p>平台调用会向托管调用方引发由非托管函数生成的异常。</p><p> <strong>2．关于Attribute（属性，注意蓝色字）</strong></p><p>属性可以放置在几乎所有声明中（但特定的属性可能限制它在其上有效的声明类型）。在语法上，属性的指定方法为：将括在方括号中的属性名置于其适用的实体声明之前。例如，具有 <strong>DllImport</strong> 属性的类将声明如下：</p><p>[DllImport] public class MyDllimportClass { … }</p><p>有关更多信息，请参见 <a href="http://msdn.microsoft.com/library/CHS/cpref/html/frlrfSystemRuntimeInteropServicesDllImportAttributeClassTopic.asp">DllImportAttribute 类</a>。</p><p>许多属性都带参数，而这些参数可以是定位（未命名）参数也可以是命名参数。任何定位参数都必须按特定顺序指定并且不能省略，而命名参数是可选的且可以按任意顺序指定。首先指定定位参数。例如，这三个属性是等效的：</p><p>[DllImport(“user32.dll”, SetLastError&#x3D;false, ExactSpelling&#x3D;false)]</p><p>[DllImport(“user32.dll”, ExactSpelling&#x3D;false, SetLastError&#x3D;false)]</p><p>[DllImport(“user32.dll”)]</p><p>第一个参数（DLL 名称）是定位参数并且总是第一个出现，其他参数为命名参数。在此例中，两个命名参数都默认为假，因此它们可以省略（有关默认参数值的信息，请参见各个属性的文档）。</p><p>在一个声明中可以放置多个属性，可分开放置，也可放在同一组括号中：</p><p>bool AMethod([In][Out]ref double x);</p><p>bool AMethod([Out][In]ref double x);</p><p>bool AMethod([In,Out]ref double x);</p><p>某些属性对于给定实体可以指定多次。此类可多次使用的属性的一个示例是 <a href="http://msdn.microsoft.com/library/CHS/csref/html/vclrfconditional.asp">Conditional</a>：</p><p>[Conditional(“DEBUG”), Conditional(“TEST1”)] void TraceMethod() {…}</p><p><strong>注意</strong>   根据约定，所有属性名称都以单词“Attribute”结束，以便将它们与 .NET Framework 中的其他项区分。但是，在代码中使用属性时不需要指定属性后缀。例如，[DllImport] 虽等效于 [DllImportAttribute]，但 <strong>DllImportAttribute</strong> 才是该属性在 .NET Framework 中的实际名称。</p><p><strong>3．MarshalAsAttribute 类</strong></p><p>指示如何在托管代码和非托管代码之间封送数据。可将该属性应用于参数、字段或返回值。</p><p>该属性为可选属性，因为每个数据类型都有默认的封送处理行为。</p><p>大多数情况下，该属性只是使用 <a href="http://msdn.microsoft.com/library/CHS/cpref/html/frlrfsystemruntimeinteropservicesunmanagedtypeclasstopic.asp">UnmanagedType</a> 枚举标识非托管数据的格式。</p><p>例如，默认情况下，公共语言运行库将字符串参数作为 <strong>BStr</strong> 封送到 COM 方法，但是可以通过制定MarshalAs属性，将字符串作为 <a href="http://msdn.microsoft.com/library/CHS/cpref/html/frlrfsystemruntimeinteropservicesunmanagedtypeclasstopic.asp">LPStr</a>、<a href="http://msdn.microsoft.com/library/CHS/cpref/html/frlrfsystemruntimeinteropservicesunmanagedtypeclasstopic.asp">LPWStr</a>、<a href="http://msdn.microsoft.com/library/CHS/cpref/html/frlrfsystemruntimeinteropservicesunmanagedtypeclasstopic.asp">LPTStr</a> 或 <a href="http://msdn.microsoft.com/library/CHS/cpref/html/frlrfsystemruntimeinteropservicesunmanagedtypeclasstopic.asp">BStr</a> 封送到非托管代码。某些 <strong>UnmanagedType</strong> 枚举成员需要附加信息。</p><p>下面，就让我们写一个小程序，试一试如何用C#语言和DllImport特性来调用Win32 API。</p><p>using System;</p><p>using System.Runtime.InteropServices;</p><p>class Program</p><p>{</p><p>​      [DllImport(“User32.dll”)]</p><p>​      public static extern int MessageBox(int h, string m, string c, int type);</p><p>​      static int Main()</p><p>​      {</p><p>​           MessageBox(0, “Hello Win32 API”, “水之真谛”, 4);</p><p>​           Console.ReadLine();</p><p>​           return 0;</p><p>​      }</p><p>}</p><p>\1. 要使用DllImport这个特性（特性也是一种类），必须使用这一句</p><p>using System.Runtime.InteropServices;</p><p>\2. 然后我们就可以制造一个DllImport类的实例，并把这个实例绑定在我们要使用的函数上了。“特性类”这种类非常怪——制造类实例的时候不使用MyClass mc &#x3D; new MyClass();这种形式，而是使用**[特性类(参数列表)]<strong>这种形式；特性类不能独立存在，一定要用作修饰其它目标上（本例是修饰后面的一个函数），不同的特性可以用来修饰类、函数、变量等等；特性类实例在被编译的时候也不产生可执行代码，而是被放进metadata里以备检索。总之，你记住特性类很怪就是了，想了解更多就查查MSDN，懒得查就先这么记——不懂惯性定律不影响你学骑自行车。[DllImport(“User32.dll”)]是说我们要使用的Win32 API函数在User32.dll这个文件里。问题又来了：我怎么知道那么多API函数都在哪个dll文件里呢？这个你可以在MSDN里查到，位置是</strong>Root-&gt;Win32 and COM Development-&gt;Development Guides-&gt;Windows API-&gt;Windows API-&gt;Windows API Reference-&gt;Functions by Category<strong>。打开这页，你会看到有很多API的分类，API全在这里了。打开一个分类，比如Dialog Box，</strong>在Functions段**，你会看到很多具体的函数，其中就有上面用到的MessageBox函数，点击进入。你将打开MessageBox的详细解释和具体用法。它的名字、返回值、参数类型尽收眼底、一览无余！而且很练英文哦~~~~在这一页的底部，你可以看到一个小表格，里面有一项“Minimum DLL Version   user32.dll”就是说这个函数在user32.dll里。</p><p>\3. 接下来就是我们的函数了。在C#里调用Win32函数有这么几个要点。</p><p><strong>第一</strong>：名字要与Win32 API的完全一样。</p><p><strong>第二</strong>：函数除了要有相应的DllImport类修饰外，还要声明成public static extern类型的。</p><p><strong>第三</strong>：也是最变态的一点，函数的返回值和参数类型要与Win32 API完全一致！</p><p>常用Win32数据类型与.NET平台数据类型的对应表：</p><table><thead><tr><th><strong>Win32 Types</strong></th><th><strong>Specification</strong></th><th><strong>CLR Type</strong></th></tr></thead><tbody><tr><td>char, INT8, SBYTE, CHAR</td><td>8-bit signed integer</td><td>System.SByte</td></tr><tr><td>short, short int, INT16, SHORT</td><td>16-bit signed integer</td><td>System.Int16</td></tr><tr><td>int, long, long int, INT32, LONG32, BOOL, INT</td><td>32-bit signed integer</td><td>System.Int32</td></tr><tr><td>__int64, INT64, LONGLONG</td><td>64-bit signed integer</td><td>System.Int64</td></tr><tr><td>unsigned char, UINT8, UCHAR, BYTE</td><td>8-bit unsigned integer</td><td>System.Byte</td></tr><tr><td>unsigned short, UINT16, USHORT, WORD, ATOM, WCHAR, __wchar_t</td><td>16-bit unsigned integer</td><td>System.UInt16</td></tr><tr><td>unsigned, unsigned int, UINT32, ULONG32, DWORD32, ULONG, DWORD, UINT</td><td>32-bit unsigned integer</td><td>System.UInt32</td></tr><tr><td>unsigned __int64, UINT64, DWORDLONG, ULONGLONG</td><td>64-bit unsigned integer</td><td>System.UInt64</td></tr><tr><td>float, FLOAT</td><td>Single-precision floating point</td><td>System.Single</td></tr><tr><td>double, long double, DOUBLE</td><td>Double-precision floating point</td><td>System.Double</td></tr><tr><td>In Win32 this type is an integer with a specially assigned meaning; in contrast, the CLR provides a specific type devoted to this meaning.</td><td></td><td></td></tr></tbody></table><p>以MessageBox函数为例（看刚才给出的函数表），它的Win32原形如下：</p><p>int <strong>MessageBox</strong>(HWND <em>hWnd</em>,   LPCTSTR <em>lpText</em>,    LPCTSTR <em>lpCaption</em>,  UINT <em>uType</em> );</p><p><strong>函数名</strong>：MessageBox将保持不变。</p><p><strong>返回值</strong>：int 将保持不变（无论是Win32还是C#，int都是32位整数）</p><p><strong>参数表</strong>：H开头意味着是Handle，一般情况下Handld都是指针类型，Win32平台的指针类型是用32位来存储的，所以在C#里正好对应一个int整型。不过，既然是指针，就没有什么正负之分，32位都应该用来保存数值——这样一来，用uint（无符号32位整型）来对应Win32的H类型更合理。不过提醒大家一点，int是受C#和.NET CLR双重支持的，而uint只受C#支持而不受.NET CLR支持，所以，本例还是老老实实地使用了int型。（肚子饿了……再坚持坚持……）</p><p>至于LPCTSTR是Long Pointer to Constant String的缩写，说白了就是——字符串。所以，用C#里的string类型就对了。</p><p><strong>修饰符</strong>：要求有相应的DllImport和public static extern</p><p>经过上面一番折腾，Win32的MessageBox函数就包装成C#可以调用的函数了：</p><p>​    [DllImport(“User32.dll”)]</p><p>​    public static extern int MessageBox(int h, string m, string c, int type);</p><p><strong>第一个</strong>：弹出的MessageBox的父窗口是谁。本例中没有，所以是0，也就是“空指针”。</p><p><strong>第二个</strong>：MessageBox的内容。本例中是“Hello Win32 API”。</p><p><strong>第三个</strong>：MessageBox的标题。本例中用的是本人Blog的名字——水之真谛——请大家不要忘记。</p><p><strong>第四个</strong>：MessageBox上的按钮是什么，如果是0，那就只有一个OK，MessageBox太短了，你将看不全“水之真谛”四个字，于是偶改成了4，这样就有两个按钮了。这些在MSDN的函数用法里都有。不过，我还是非常推荐您阅读一下本人的另一篇拙作<strong>《一个Win32程序的进化》</strong> 。</p><p>​     </p><p>三. 真的有必要吗？</p><p>​        .NET Framework是对Win32 API的良好封装，大部分Win32 API函数都已经封装在了.NET Framework类库的各个类里了。    </p><p>下面是个例子</p><p>​        那是在很久很久以前，我给一个公司写程序用来控制用户登录，在登录之前，用户不能把鼠标移出登录窗体，因为要控制鼠标，所以我首先想起了调用Win32 API中与Cursor相关的函数来——于是不管三七二十一、花了九牛二虎之力调用了Win32 API中的ClipCursor()这个函数，效果还不错。</p><p>​        结果前两天翻.NET Framework类库的时候，发现System.Windows.Forms.Cursor类的Clip属性就是专门做这个用的！差点没把鼻子气歪了……请大家自己动手创建一个C#的Windows程序，把下面的核心代码贴到主窗体的双击事件里，试一试。做这个例子的目的就是要告诉大家：<strong>1.对类库的了解程序直接决定了你编程的效率和质量——用类库里的组件比我们“从轮子造起”要快得多、安全得多。2.不到万不得已，不要去直接调Win32 API函数——那是不安全的。</strong></p><p>Rectangle r &#x3D; new Rectangle(this.Left, this.Top, this.Width, this.Height);</p><p>System.Windows.Forms.Cursor.Clip &#x3D; r;</p><p>最后，大家一定非常想知道，.NET Framework都为我们封装好了哪些Win32 API，OK，MSDN里有一篇文章，专门列出了这些。文章的名字是《Microsoft Win32 to Microsoft .NET Framework API Map》  </p><p>下面以C#为例简单介绍调用API的基本过程：  </p><p>　 动态链接库函数声明部分一般由下列两部分组成，一是函数名或索引号，二是动态链接库的文件名。  </p><p>　 譬如，你想调用User32.DLL中的MessageBox函数，我们必须指明函数的名字MessageBoxA或MessageBoxW，以及库名字User32.dll,我们知道Win32 API对每一个涉及字符串和字符的函数一般都存在两个版本，单字节字符的ANSI版本和双字节字符的UNICODE版本。 </p><p>　 下面是一个调用API函数的例子：  </p><p>[DllImport(“KERNEL32.DLL”, EntryPoint&#x3D;”MoveFileW”, SetLastError&#x3D;true,  </p><p>CharSet&#x3D;CharSet.Unicode, ExactSpelling&#x3D;true,  </p><p>CallingConvention&#x3D;CallingConvention.StdCall)]  </p><p>public static extern bool MoveFile(String src, String dst);  </p><p>　 其中入口点EntryPoint标识函数在动态链接库的入口位置，在一个受管辖的工程中，目标函数的原始名字和序号入口点不仅标识一个跨越互操作界限的函数。而且，你还可以把这个入口点映射为一个不同的名字，也就是对函数进行重命名。重命名可以给调用函数带来种种便利，通过重命名，一方面我们不用为函数的大小写伤透脑筋，同时它也可以保证与已有的命名规则保持一致，允许带有不同参数类型的函数共存，更重要的是它简化了对ANSI和Unicode版本的调用。CharSet用于标识函数调用所采用的是Unicode或是ANSI版本，ExactSpelling＝false将告诉编译器,让编译器决定使用Unicode或者是Ansi版本。其它的参数请参考MSDN在线帮助. </p><p>在C#中，你可以在EntryPoint域通过名字和序号声明一个动态链接库函数，如果在方法定义中使用的函数名与DLL入口点相同，你不需要在EntryPoint域显示声明函数。否则，你必须使用下列属性格式指示一个名字和序号。 </p><p>[DllImport(“dllname”, EntryPoint&#x3D;”Functionname”)]  </p><p>[DllImport(“dllname”, EntryPoint&#x3D;”#123”)]  </p><p>值得注意的是，你必须在数字序号前加“＃”  </p><p>下面是一个用MsgBox替换MessageBox名字的例子：  </p><p>using System.Runtime.InteropServices;  </p><p>[DllImport(“user32.dll”, EntryPoint&#x3D;”MessageBox”)]  </p><p>public static extern int MsgBox(int hWnd, String text, String caption, uint type);  </p><p>许多受管辖的动态链接库函数期望你能够传递一个复杂的参数类型给函数，譬如一个用户定义的结构类型成员或者受管辖代码定义的一个类成员，这时你必须提供额外的信息格式化这个类型，以保持参数原有的布局和对齐。 </p><p>C#提供了一个StructLayoutAttribute类，通过它你可以定义自己的格式化类型，在受管辖代码中，格式化类型是一个用StructLayoutAttribute说明的结构或类成员，通过它能够保证其内部成员预期的布局信息。布局的选项共有三种： </p><p>布局选项  </p><p>描述  </p><p>LayoutKind.Automatic  </p><p>为了提高效率允许运行态对类型成员重新排序。  </p><p>注意：永远不要使用这个选项来调用不受管辖的动态链接库函数。  </p><p>LayoutKind.Explicit  </p><p>对每个域按照FieldOffset属性对类型成员排序  </p><p>LayoutKind.Sequential  </p><p>对出现在受管辖类型定义地方的不受管辖内存中的类型成员进行排序。  </p><p>传递结构成员  </p><p>下面的例子说明如何在受管辖代码中定义一个点和矩形类型，并作为一个参数传递给User32.dll库中的PtInRect函数，  </p><p>函数的不受管辖原型声明如下：  </p><p>BOOL PtInRect(const RECT *lprc, POINT pt);  </p><p>注意你必须通过引用传递Rect结构参数，因为函数需要一个Rect的结构指针。  </p><p>using System.Runtime.InteropServices;  </p><p>[StructLayout(LayoutKind.Sequential)]  </p><p>public struct Point {  </p><p>public int x;  </p><p>public int y;  </p><p>}  </p><p>[StructLayout(LayoutKind.Explicit]  </p><p>public struct Rect {  </p><p>[FieldOffset(0)] public int left;  </p><p>[FieldOffset(4)] public int top;  </p><p>[FieldOffset(8)] public int right;  </p><p>[FieldOffset(12)] public int bottom;  </p><p>}  </p><p>[DllImport(“User32.dll”)]  </p><p>public static extern Bool PtInRect(ref Rect r, Point p);  </p><p>类似你可以调用GetSystemInfo函数获得系统信息：  </p><p> using System.Runtime.InteropServices;  </p><p>[StructLayout(LayoutKind.Sequential)]  </p><p>public struct SYSTEM_INFO {  </p><p>public uint dwOemId;  </p><p>public uint dwPageSize;  </p><p>public uint lpMinimumApplicationAddress;  </p><p>public uint lpMaximumApplicationAddress;  </p><p>public uint dwActiveProcessorMask;  </p><p>public uint dwNumberOfProcessors;  </p><p>public uint dwProcessorType;  </p><p>public uint dwAllocationGranularity;  </p><p>public uint dwProcessorLevel;  </p><p>public uint dwProcessorRevision;  </p><p>}  </p><p>[DllImport(“kernel32”)]  </p><p>static extern void GetSystemInfo(ref SYSTEM_INFO pSI);  </p><p>SYSTEM_INFO pSI &#x3D; new SYSTEM_INFO();  </p><p>GetSystemInfo(ref pSI);  </p><p>类成员的传递  </p><p>同样只要类具有一个固定的类成员布局，你也可以传递一个类成员给一个不受管辖的动态链接库函数，下面的例子主要说明如何传递一个sequential顺序定义的MySystemTime类给User32.dll的GetSystemTime函数, 函数用C&#x2F;C++调用规范如下: </p><p>void GetSystemTime(SYSTEMTIME* SystemTime);  </p><p>不像传值类型,类总是通过引用传递参数.  </p><p>[StructLayout(LayoutKind.Sequential)]  </p><p>public class MySystemTime {  </p><p>public ushort wYear;  </p><p>public ushort wMonth;  </p><p>public ushort wDayOfWeek;  </p><p>public ushort wDay;  </p><p>public ushort wHour;  </p><p>public ushort wMinute;  </p><p>public ushort wSecond;  </p><p>public ushort wMilliseconds;  </p><p>}  </p><p>[DllImport(“User32.dll”)]  </p><p>public static extern void GetSystemTime(MySystemTime st);  </p><p>回调函数的传递:  </p><p>从受管辖的代码中调用大多数动态链接库函数,你只需创建一个受管辖的函数定义，然后调用它即可,这个过程非常直接。  </p><p>如果一个动态链接库函数需要一个函数指针作为参数，你还需要做以下几步：  </p><p>首先，你必须参考有关这个函数的文档，确定这个函数是否需要一个回调；第二，你必须在受管辖代码中创建一个回调函数；最后，你可以把指向这个函数的指针作为一个参数创递给DLL函数,. </p><p><strong>回调函数及其实现:</strong>  </p><p>回调函数经常用在任务需要重复执行的场合,譬如用于枚举函数,譬如Win32 API 中的EnumFontFamilies(字体枚举), EnumPrinters(打印机), EnumWindows (窗口枚举)函数. 下面以窗口枚举为例,谈谈如何通过调用EnumWindow 函数遍历系统中存在的所有窗口 </p><p>分下面几个步骤:  </p><p>\1. 在实现调用前先参考函数的声明  </p><p>BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARMAM IParam)  </p><p>显然这个函数需要一个回调函数地址作为参数.  </p><p>\2. 创建一个受管辖的回调函数,这个例子声明为代表类型(delegate),也就是我们所说的回调,它带有两个参数hwnd和lparam,第一个参数是一个窗口句柄，第二个参数由应用程序定义，两个参数均为整形。 </p><p>当这个回调函数返回一个非零值时，标示执行成功，零则暗示失败，这个例子总是返回True值，以便持续枚举。</p><p>\3. 最后创建以代表对象(delegate)，并把它作为一个参数传递给EnumWindows 函数，平台会自动地 把代表转化成函数能够识别的回调格式。 </p><p>using System;  </p><p>using System.Runtime.InteropServices;  </p><p>public delegate bool CallBack(int hwnd, int lParam);  </p><p>public class EnumReportApp {  </p><p>[DllImport(“user32”)]  </p><p>public static extern int EnumWindows(CallBack x, int y);  </p><p>public static void Main()  </p><p>{  </p><p>   CallBack myCallBack &#x3D; new CallBack(EnumReportApp.Report);  </p><p>   EnumWindows(myCallBack, 0);  </p><p>}  </p><p>public static bool Report(int hwnd, int lParam) {  </p><p>​    Console.Write(“窗口句柄为”);  </p><p>​    Console.WriteLine(hwnd);  </p><p>​    return true;  </p><p>}  </p><p>}  </p><p><strong>指针类型参数传递</strong>：  </p><p>　 在Windows API函数调用时，大部分函数采用指针传递参数，对一个结构变量指针，我们除了使用上面的类和结构方法传递参数之外，我们有时还可以采用数组传递参数。 </p><p>　 下面这个函数通过调用GetUserName获得用户名  </p><p>BOOL GetUserName(  </p><p>​    LPTSTR lpBuffer, &#x2F;&#x2F; 用户名缓冲区  </p><p>​    LPDWORD nSize &#x2F;&#x2F; 存放缓冲区大小的地址指针  </p><p>);  </p><p>　   </p><p>[DllImport(“Advapi32.dll”,  EntryPoint&#x3D;”GetComputerName”,  ExactSpelling&#x3D;false,  </p><p>SetLastError&#x3D;true)]  </p><p>static extern bool GetComputerName ( [MarshalAs(UnmanagedType.LPArray)] byte[] lpBuffer,  [MarshalAs(UnmanagedType.LPArray)] Int32[] nSize );  </p><p>　 这个函数接受两个参数，char * 和int *,因为你必须分配一个字符串缓冲区以接受字符串指针，你可以使用String类代替这个参数类型，当然你还可以声明一个字节数组传递ANSI字符串，同样你也可以声明一个只有一个元素的长整型数组，使用数组名作为第二个参数。上面的函数可以调用如下： </p><p>byte[] str&#x3D;new byte[20];  </p><p>Int32[] len&#x3D;new Int32[1];  </p><p>len[0]&#x3D;20;  </p><p>GetComputerName (str,len);  </p><p>MessageBox.Show(System.Text.Encoding.ASCII.GetString(str));  </p><p><a href="http://blog.csdn.net/JacksonH/archive/2005/07/27/436410.aspx"> <strong>C#与C++之间类型的对应</strong></a></p><table><thead><tr><th><strong>Windows Data Type</strong></th><th><strong>.NET Data Type</strong></th></tr></thead><tbody><tr><td>BOOL, BOOLEAN</td><td>Boolean or Int32</td></tr><tr><td>BSTR</td><td>String</td></tr><tr><td>BYTE</td><td>Byte</td></tr><tr><td>CHAR</td><td>Char</td></tr><tr><td>DOUBLE</td><td>Double</td></tr><tr><td>DWORD</td><td>Int32 or UInt32</td></tr><tr><td>FLOAT</td><td>Single</td></tr><tr><td>HANDLE (and all other handle types, such as HFONT and HMENU)</td><td>IntPtr, UintPtr or HandleRef</td></tr><tr><td>HRESULT</td><td>Int32 or UInt32</td></tr><tr><td>INT</td><td>Int32</td></tr><tr><td>LANGID</td><td>Int16 or UInt16</td></tr><tr><td>LCID</td><td>Int32 or UInt32</td></tr><tr><td>LONG</td><td>Int32</td></tr><tr><td>LPARAM</td><td>IntPtr, UintPtr or Object</td></tr><tr><td>LPCSTR</td><td>String</td></tr><tr><td>LPCTSTR</td><td>String</td></tr><tr><td>LPCWSTR</td><td>String</td></tr><tr><td>LPSTR</td><td>String or StringBuilder*</td></tr><tr><td>LPTSTR</td><td>String or StringBuilder</td></tr><tr><td>LPWSTR</td><td>String or StringBuilder</td></tr><tr><td>LPVOID</td><td>IntPtr, UintPtr or Object</td></tr><tr><td>LRESULT</td><td>IntPtr</td></tr><tr><td>SAFEARRAY</td><td>.NET array type</td></tr><tr><td>SHORT</td><td>Int16</td></tr><tr><td>TCHAR</td><td>Char</td></tr><tr><td>UCHAR</td><td>SByte</td></tr><tr><td>UINT</td><td>Int32 or UInt32</td></tr><tr><td>ULONG</td><td>Int32 or UInt32</td></tr><tr><td>VARIANT</td><td>Object</td></tr><tr><td>VARIANT_BOOL</td><td>Boolean</td></tr><tr><td>WCHAR</td><td>Char</td></tr><tr><td>WORD</td><td>Int16 or UInt16</td></tr><tr><td>WPARAM</td><td>IntPtr, UintPtr or Object</td></tr><tr><td></td><td></td></tr></tbody></table><p>另： 在进行string转换时，需要加入前缀[MarshalAs(UnmanagedType.LPStr)]</p><p>LPDWORD   对应于  ref int</p><table><thead><tr><th><strong>C&#x2F;C++</strong></th><th><strong>C#</strong></th></tr></thead><tbody><tr><td>HANDLE, LPDWORD, LPVOID, void*</td><td>IntPtr</td></tr><tr><td>LPCTSTR, LPCTSTR, LPSTR, char*, const char*, Wchar_t*, LPWSTR</td><td>String [in], StringBuilder [in, out]</td></tr><tr><td>DWORD, unsigned long, Ulong</td><td>UInt32, [MarshalAs(UnmanagedType.U4)]</td></tr><tr><td>bool</td><td>bool</td></tr><tr><td>LP<struct></td><td>[In] ref <struct></td></tr><tr><td>SIZE_T</td><td>uint</td></tr><tr><td>LPDWORD</td><td>out uint</td></tr><tr><td>LPTSTR</td><td>[Out] StringBuilder</td></tr><tr><td>PULARGE_INTEGER</td><td>out ulong</td></tr><tr><td>WORD</td><td>uInt16</td></tr><tr><td>Byte, unsigned char</td><td>byte</td></tr><tr><td>Short</td><td>Int16</td></tr><tr><td>Long, int</td><td>Int32</td></tr><tr><td>float</td><td>single</td></tr><tr><td>double</td><td>double</td></tr><tr><td>NULL pointer</td><td>IntPtr.Zero</td></tr><tr><td>Uint</td><td>Uint32</td></tr></tbody></table><table><thead><tr><th><strong>Wtypes.h 中的非托管类型</strong></th><th><strong>非托管 C 语言类型</strong></th><th><strong>托管类名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>HANDLE</td><td>void*</td><td>System.IntPtr</td><td>在 32 位 Windows 操作系统上为 32 位，在 64 位 Windows 操作系统上为 64 位。</td></tr><tr><td>BYTE</td><td>unsigned char</td><td>System.Byte</td><td>8 位</td></tr><tr><td>SHORT</td><td>short</td><td>System.Int16</td><td>16 位</td></tr><tr><td>WORD</td><td>unsigned short</td><td>System.UInt16</td><td>16 位</td></tr><tr><td>INT</td><td>int</td><td>System.Int32</td><td>32 位</td></tr><tr><td>UINT</td><td>unsigned int</td><td>System.UInt32</td><td>32 位</td></tr><tr><td>LONG</td><td>long</td><td>System.Int32</td><td>32 位</td></tr><tr><td>BOOL</td><td>long</td><td>System.Int32</td><td>32 位</td></tr><tr><td>DWORD</td><td>unsigned long</td><td>System.UInt32</td><td>32 位</td></tr><tr><td>ULONG</td><td>unsigned long</td><td>System.UInt32</td><td>32 位</td></tr><tr><td>CHAR</td><td>char</td><td>System.Char</td><td>用 ANSI 修饰。</td></tr><tr><td>LPSTR</td><td>char*</td><td>System.String 或 System.Text.StringBuilder</td><td>用 ANSI 修饰。</td></tr><tr><td>LPCSTR</td><td>Const char*</td><td>System.String 或 System.Text.StringBuilder</td><td>用 ANSI 修饰。</td></tr><tr><td>LPWSTR</td><td>wchar_t*</td><td>System.String 或 System.Text.StringBuilder</td><td>用 Unicode 修饰。</td></tr><tr><td>LPCWSTR</td><td>Const wchar_t*</td><td>System.String 或 System.Text.StringBuilder</td><td>用 Unicode 修饰。</td></tr><tr><td>FLOAT</td><td>Float</td><td>System.Single</td><td>32 位</td></tr><tr><td>DOUBLE</td><td>Double</td><td>System.Double</td><td>64 位</td></tr></tbody></table><p>BOOL&#x3D;System.Int32</p><p>BOOLEAN&#x3D;System.Int32</p><p>BYTE&#x3D;System.UInt16</p><p>CHAR&#x3D;System.Int16</p><p>COLORREF&#x3D;System.UInt32</p><p>DWORD&#x3D;System.UInt32</p><p>DWORD32&#x3D;System.UInt32</p><p>DWORD64&#x3D;System.UInt64</p><p>FLOAT&#x3D;System.Float</p><p>HACCEL&#x3D;System.IntPtr</p><p>HANDLE&#x3D;System.IntPtr</p><p>HBITMAP&#x3D;System.IntPtr</p><p>HBRUSH&#x3D;System.IntPtr</p><p>HCONV&#x3D;System.IntPtr</p><p>HCONVLIST&#x3D;System.IntPtr</p><p>HCURSOR&#x3D;System.IntPtr</p><p>HDC&#x3D;System.IntPtr</p><p>HDDEDATA&#x3D;System.IntPtr</p><p>HDESK&#x3D;System.IntPtr</p><p>HDROP&#x3D;System.IntPtr</p><p>HDWP&#x3D;System.IntPtr</p><p>HENHMETAFILE&#x3D;System.IntPtr</p><p>HFILE&#x3D;System.IntPtr</p><p>HFONT&#x3D;System.IntPtr</p><p>HGDIOBJ&#x3D;System.IntPtr</p><p>HGLOBAL&#x3D;System.IntPtr</p><p>HHOOK&#x3D;System.IntPtr</p><p>HICON&#x3D;System.IntPtr</p><p>HIMAGELIST&#x3D;System.IntPtr</p><p>HIMC&#x3D;System.IntPtr</p><p>HINSTANCE&#x3D;System.IntPtr</p><p>HKEY&#x3D;System.IntPtr</p><p>HLOCAL&#x3D;System.IntPtr</p><p>HMENU&#x3D;System.IntPtr</p><p>HMETAFILE&#x3D;System.IntPtr</p><p>HMODULE&#x3D;System.IntPtr</p><p>HMONITOR&#x3D;System.IntPtr</p><p>HPALETTE&#x3D;System.IntPtr</p><p>HPEN&#x3D;System.IntPtr</p><p>HRGN&#x3D;System.IntPtr</p><p>HRSRC&#x3D;System.IntPtr</p><p>HSZ&#x3D;System.IntPtr</p><p>HWINSTA&#x3D;System.IntPtr</p><p>HWND&#x3D;System.IntPtr</p><p>INT&#x3D;System.Int32</p><p>INT32&#x3D;System.Int32</p><p>INT64&#x3D;System.Int64</p><p>LONG&#x3D;System.Int32</p><p>LONG32&#x3D;System.Int32</p><p>LONG64&#x3D;System.Int64</p><p>LONGLONG&#x3D;System.Int64</p><p>LPARAM&#x3D;System.IntPtr</p><p>LPBOOL&#x3D;System.Int16[]</p><p>LPBYTE&#x3D;System.UInt16[]</p><p>LPCOLORREF&#x3D;System.UInt32[]</p><p>LPCSTR&#x3D;System.String</p><p>LPCTSTR&#x3D;System.String</p><p>LPCVOID&#x3D;System.UInt32</p><p>LPCWSTR&#x3D;System.String</p><p>LPDWORD&#x3D;System.UInt32[]</p><p>LPHANDLE&#x3D;System.UInt32</p><p>LPINT&#x3D;System.Int32[]</p><p>LPLONG&#x3D;System.Int32[]</p><p>LPSTR&#x3D;System.String</p><p>LPTSTR&#x3D;System.String</p><p>LPVOID&#x3D;System.UInt32</p><p>LPWORD&#x3D;System.Int32[]</p><p>LPWSTR&#x3D;System.String</p><p>LRESULT&#x3D;System.IntPtr</p><p>PBOOL&#x3D;System.Int16[]</p><p>PBOOLEAN&#x3D;System.Int16[]</p><p>PBYTE&#x3D;System.UInt16[]</p><p>PCHAR&#x3D;System.Char[]</p><p>PCSTR&#x3D;System.String</p><p>PCTSTR&#x3D;System.String</p><p>PCWCH&#x3D;System.UInt32</p><p>PCWSTR&#x3D;System.UInt32</p><p>PDWORD&#x3D;System.Int32[]</p><p>PFLOAT&#x3D;System.Float[]</p><p>PHANDLE&#x3D;System.UInt32</p><p>PHKEY&#x3D;System.UInt32</p><p>PINT&#x3D;System.Int32[]</p><p>PLCID&#x3D;System.UInt32</p><p>PLONG&#x3D;System.Int32[]</p><p>PLUID&#x3D;System.UInt32</p><p>PSHORT&#x3D;System.Int16[]</p><p>PSTR&#x3D;System.String</p><p>PTBYTE&#x3D;System.Char[]</p><p>PTCHAR&#x3D;System.Char[]</p><p>PTSTR&#x3D;System.String</p><p>PUCHAR&#x3D;System.Char[]</p><p>PUINT&#x3D;System.UInt32[]</p><p>PULONG&#x3D;System.UInt32[]</p><p>PUSHORT&#x3D;System.UInt16[]</p><p>PVOID&#x3D;System.UInt32</p><p>PWCHAR&#x3D;System.Char[]</p><p>PWORD&#x3D;System.Int16[]</p><p>PWSTR&#x3D;System.String</p><p>REGSAM&#x3D;System.UInt32</p><p>SC_HANDLE&#x3D;System.IntPtr</p><p>SC_LOCK&#x3D;System.IntPtr</p><p>SHORT&#x3D;System.Int16</p><p>SIZE_T&#x3D;System.UInt32</p><p>SSIZE_&#x3D;System.UInt32</p><p>TBYTE&#x3D;System.Char</p><p>TCHAR&#x3D;System.Char</p><p>UCHAR&#x3D;System.</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#字符串的中文、数字、字母检测</title>
      <link href="/post/2e7ea77f.html"/>
      <url>/post/2e7ea77f.html</url>
      
        <content type="html"><![CDATA[<p>C#字符串的中文、数字、字母检测</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetResult</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">int</span> len=str.Length;</span><br><span class="line"> str=Regex.Replace(str,<span class="string">&quot;[a-zA-Z]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"> <span class="built_in">string</span> result=(len-str.Length)+<span class="string">&quot;个字母 &quot;</span>;</span><br><span class="line"> len=str.Length;</span><br><span class="line"> str=Regex.Replace(str,<span class="string">&quot;[0-9]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"> result+=(len-str.Length)+<span class="string">&quot;个数字 &quot;</span>;</span><br><span class="line"> len=str.Length;</span><br><span class="line"> str=Regex.Replace(str,<span class="string">&quot;[\u4e00-\u9fa5]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"> result+=(len-str.Length)+<span class="string">&quot;个中文&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检测字符串包含中文、英文和数字的个数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#字符串Des和Md5加密</title>
      <link href="/post/d777309e.html"/>
      <url>/post/d777309e.html</url>
      
        <content type="html"><![CDATA[<p>C#字符串Des和Md5加密</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;  </span><br><span class="line"><span class="keyword">using</span> System.IO;  </span><br><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StringEncryption</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span>  方法一 C#中对字符串加密解密（对称算法）  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] Keys = &#123; <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0x78</span>, <span class="number">0x90</span>, <span class="number">0xAB</span>, <span class="number">0xCD</span>, <span class="number">0xEF</span> &#125;;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> DES加密字符串  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;encryptString&quot;&gt;</span>待加密的字符串<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;encryptKey&quot;&gt;</span>加密密钥,要求为8位<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加密成功返回加密后的字符串，失败返回源串<span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">EncryptDES</span>(<span class="params"><span class="built_in">string</span> encryptString, <span class="built_in">string</span> encryptKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] rgbKey = Encoding.UTF8.GetBytes(encryptKey.Substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">            <span class="built_in">byte</span>[] rgbIV = Keys;</span><br><span class="line">            <span class="built_in">byte</span>[] inputByteArray = Encoding.UTF8.GetBytes(encryptString);</span><br><span class="line">            DESCryptoServiceProvider dCSP = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">            MemoryStream mStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            CryptoStream cStream = <span class="keyword">new</span> CryptoStream(mStream, dCSP.CreateEncryptor(rgbKey, rgbIV), CryptoStreamMode.Write);</span><br><span class="line">            cStream.Write(inputByteArray, <span class="number">0</span>, inputByteArray.Length);</span><br><span class="line">            cStream.FlushFinalBlock();</span><br><span class="line">            cStream.Close();</span><br><span class="line">            <span class="keyword">return</span> Convert.ToBase64String(mStream.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> encryptString;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> DES解密字符串  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;decryptString&quot;&gt;</span>待解密的字符串<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;decryptKey&quot;&gt;</span>解密密钥,要求为8位,和加密密钥相同<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>解密成功返回解密后的字符串，失败返源串<span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DecryptDES</span>(<span class="params"><span class="built_in">string</span> decryptString, <span class="built_in">string</span> decryptKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] rgbKey = Encoding.UTF8.GetBytes(decryptKey);</span><br><span class="line">            <span class="built_in">byte</span>[] rgbIV = Keys;</span><br><span class="line">            <span class="built_in">byte</span>[] inputByteArray = Convert.FromBase64String(decryptString);</span><br><span class="line">            DESCryptoServiceProvider DCSP = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">            MemoryStream mStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            CryptoStream cStream = <span class="keyword">new</span> CryptoStream(mStream, DCSP.CreateDecryptor(rgbKey, rgbIV), CryptoStreamMode.Write);</span><br><span class="line">            cStream.Write(inputByteArray, <span class="number">0</span>, inputByteArray.Length);</span><br><span class="line">            cStream.FlushFinalBlock();</span><br><span class="line">            cStream.Close();</span><br><span class="line">            <span class="keyword">return</span> Encoding.UTF8.GetString(mStream.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;catch&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> decryptString;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> MD5不可逆加密  </span></span><br><span class="line">    <span class="comment">//32位加密  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetMD5_32</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> _input_charset</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5 md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] t = md5.ComputeHash(Encoding.GetEncoding(_input_charset).GetBytes(s));</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; t.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(t[i].ToString(<span class="string">&quot;x&quot;</span>).PadLeft(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//16位加密   </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetMd5_16</span>(<span class="params"><span class="built_in">string</span> ConvertString</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5CryptoServiceProvider md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">string</span> t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(ConvertString)), <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">        t2 = t2.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片灰化</title>
      <link href="/post/25bed65d.html"/>
      <url>/post/25bed65d.html</url>
      
        <content type="html"><![CDATA[<p> 图片灰化</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing；</span><br><span class="line">   <span class="function">Texture2D <span class="title">Tu</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bitmap bitmap = <span class="keyword">new</span> Bitmap(Application.dataPath + <span class="string">@&quot;/1.png&quot;</span>);</span><br><span class="line">        Texture2D texture2D = <span class="keyword">new</span> Texture2D(bitmap.Width, bitmap.Height, TextureFormat.ARGB32, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; bitmap.Width; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; bitmap.Height; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//取图片当前的像素点                                                                </span></span><br><span class="line">                <span class="keyword">var</span> color = bitmap.GetPixel(i, j);</span><br><span class="line">                <span class="keyword">var</span> gray = (<span class="built_in">int</span>)(color.R * <span class="number">0.299</span> + color.G * <span class="number">0.587</span> + color.B * <span class="number">0.114</span>);</span><br><span class="line">                <span class="comment">//重新设置当前的像素点</span></span><br><span class="line">                bitmap.SetPixel(i, j, System.Drawing.Color.FromArgb(gray, gray, gray));</span><br><span class="line">                texture2D.SetPixel(i, j, <span class="keyword">new</span> UnityEngine.Color(gray, gray, gray));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bitmap.Save(Application.dataPath + <span class="string">@&quot;/2.png&quot;</span>);</span><br><span class="line">        <span class="comment">//texture2D = Application.dataPath + @&quot;/2.png&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> texture2D;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AssetsBundles</title>
      <link href="/post/69537ebe.html"/>
      <url>/post/69537ebe.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">首先得写一个Editor类用来打包带有assetsBundle标签的资源，</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BuildAssetsBundle</span>  &#123;</span><br><span class="line">  </span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;BuildAssetsBundleTools/BuildAssetsBundles&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">Build</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> strAbOutPathDIR = <span class="built_in">string</span>.Empty;</span><br><span class="line">        strAbOutPathDIR = Application.streamingAssetsPath;</span><br><span class="line">        <span class="keyword">if</span> (!Directory.Exists(strAbOutPathDIR))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(strAbOutPathDIR);</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//打包API  参数：路径 打包设置  打包平台     BuildPipeline.BuildAssetBundles(strAbOutPathDIR,BuildAssetBundleOptions.None,BuildTarget.StandaloneWindows64);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">还有一个加载类（示例为加载prefab）</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoadAssetsBundles</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform temp;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">&quot;file://&quot;</span> + Application.streamingAssetsPath + <span class="string">&quot;/prefab&quot;</span>;</span><br><span class="line">        StartCoroutine(LoadPrefabAssets(path, <span class="string">&quot;Cube&quot;</span>, temp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">LoadPrefabAssets</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">string</span> assetsName = <span class="string">&quot;&quot;</span>, Transform showPos = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(path))</span><br><span class="line">            Debug.LogError(GetType() + <span class="string">&quot;/LoadPrefabAssets()/输入参数  path为空，请检查！&quot;</span>);</span><br><span class="line">        <span class="keyword">using</span> (WWW www = <span class="keyword">new</span> WWW(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">            AssetBundle ab = www.assetBundle;</span><br><span class="line">            <span class="keyword">if</span> (ab != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (assetsName == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (showPos != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        GameObject tempClonePrefabs = (GameObject)Instantiate(ab.LoadAsset(assetsName));</span><br><span class="line">                        tempClonePrefabs.transform.position = showPos.transform.position;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Instantiate(ab.mainAsset);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (showPos != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        GameObject tempClonePrefabs = (GameObject)Instantiate(ab.LoadAsset(assetsName));</span><br><span class="line">                        tempClonePrefabs.transform.position = showPos.transform.position;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Instantiate(ab.mainAsset);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打开PC对话框</title>
      <link href="/post/93fd97f.html"/>
      <url>/post/93fd97f.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OpenFileName</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> structSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> IntPtr dlgOwner = IntPtr.Zero;</span><br><span class="line">    <span class="keyword">public</span> IntPtr instance = IntPtr.Zero;</span><br><span class="line">    <span class="keyword">public</span> String filter = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> String customFilter = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxCustFilter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> filterIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String file = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxFile = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String fileTitle = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> maxFileTitle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String initialDir = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> String title = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">short</span> fileOffset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">short</span> fileExtension = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String defExt = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> IntPtr custData = IntPtr.Zero;</span><br><span class="line">    <span class="keyword">public</span> IntPtr hook = IntPtr.Zero;</span><br><span class="line">    <span class="keyword">public</span> String templateName = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> IntPtr reservedPtr = IntPtr.Zero;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> reservedInt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> flagsEx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DllTest</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;Comdlg32.dll&quot;</span>, SetLastError = true, ThrowOnUnmappableChar = true, CharSet = CharSet.Auto)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">GetOpenFileName</span>(<span class="params">[In, Out] OpenFileName ofn</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">GetOpenFileName1</span>(<span class="params">[In, Out] OpenFileName ofn</span>)</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetOpenFileName(ofn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RawImage rawImage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">35</span>), <span class="string">&quot;OpenDialog&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            OpenFileName ofn = <span class="keyword">new</span> OpenFileName();</span><br><span class="line"></span><br><span class="line">            ofn.structSize = Marshal.SizeOf(ofn);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//三菱(*.gxw)\0*.gxw\0西门子(*.mwp)\0*.mwp\0All Files\0*.*\0\0  </span></span><br><span class="line">            ofn.filter = <span class="string">&quot;All Files\0*.*\0\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ofn.file = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">256</span>]);</span><br><span class="line"></span><br><span class="line">            ofn.maxFile = ofn.file.Length;</span><br><span class="line"></span><br><span class="line">            ofn.fileTitle = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">64</span>]);</span><br><span class="line"></span><br><span class="line">            ofn.maxFileTitle = ofn.fileTitle.Length;</span><br><span class="line"></span><br><span class="line">            ofn.initialDir = UnityEngine.Application.dataPath;<span class="comment">//默认路径  </span></span><br><span class="line"></span><br><span class="line">            ofn.title = <span class="string">&quot;Open Project&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ofn.defExt = <span class="string">&quot;JPG&quot;</span>;<span class="comment">//显示文件的类型  </span></span><br><span class="line">                               <span class="comment">//注意 一下项目不一定要全选 但是0x00000008项不要缺少  </span></span><br><span class="line">            ofn.flags = <span class="number">0x00080000</span> | <span class="number">0x00001000</span> | <span class="number">0x00000800</span> | <span class="number">0x00000200</span> | <span class="number">0x00000008</span>;<span class="comment">//OFN_EXPLORER|OFN_FILEMUSTEXIST|OFN_PATHMUSTEXIST| OFN_ALLOWMULTISELECT|OFN_NOCHANGEDIR  </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DllTest.GetOpenFileName(ofn))</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                 StartCoroutine(WaitLoad(ofn.file));<span class="comment">//加载图片到panle  </span></span><br><span class="line">                Debug.Log(<span class="string">&quot;Selected file with full path: &#123;0&#125;&quot;</span> + ofn.file);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">WaitLoad</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WWW wwwTexture = <span class="keyword">new</span> WWW(<span class="string">&quot;file://&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        Debug.Log(wwwTexture.url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> wwwTexture;</span><br><span class="line"></span><br><span class="line">        rawImage.texture = wwwTexture.texture;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在脚本上添加按钮</title>
      <link href="/post/392be58f.html"/>
      <url>/post/392be58f.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><p>&#x2F;&#x2F;前提统一父物体下</p><p>&#x2F;&#x2F;获取游戏对象的索引        </p><p>transform.GetSiblingIndex();</p><p>&#x2F;&#x2F;设置游戏对象的索引</p><p> transform.SetSiblingIndex(transform.GetSiblingIndex());</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在脚本上添加按钮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">LOG</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;好的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">CustomEditor(typeof(Demo))</span>]</span><br><span class="line">[<span class="meta">CanEditMultipleObjects</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoEditor</span>:<span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line">        <span class="comment">//设置按钮中文字的颜色  </span></span><br><span class="line">        GUI.color = Color.green;</span><br><span class="line">        <span class="comment">//设置按钮的背景色  </span></span><br><span class="line">        GUI.backgroundColor = Color.red;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;good&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Demo demo = (Demo)target;</span><br><span class="line">            demo.LOG();</span><br><span class="line">        &#125;</span><br><span class="line">        GUI.color = Color.yellow;</span><br><span class="line">        <span class="comment">//设置按钮的背景色  </span></span><br><span class="line">        GUI.backgroundColor = Color.white;</span><br><span class="line">        <span class="comment">// Up-down buttons</span></span><br><span class="line">        GUILayout.BeginHorizontal();</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;▲&quot;</span>)) &#123; &#125;;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;▼&quot;</span>)) &#123; &#125;;</span><br><span class="line">        GUILayout.EndHorizontal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑器模式下改变字段触发事件</title>
      <link href="/post/86aa7890.html"/>
      <url>/post/86aa7890.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Width</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> width;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            width = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(Width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">CustomEditor(typeof(Test))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestInspector</span>:<span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    Test scriptObject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        scriptObject = target <span class="keyword">as</span> Test;</span><br><span class="line">        <span class="built_in">int</span> width = EditorGUILayout.IntField(<span class="string">&quot;Width&quot;</span>,scriptObject.Width);</span><br><span class="line">        <span class="keyword">if</span> (width!=scriptObject.Width)</span><br><span class="line">        &#123;</span><br><span class="line">            scriptObject.Width = width;</span><br><span class="line">            scriptObject.PrintMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">base</span>.DrawDefaultInspector();     </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建.asset文件</title>
      <link href="/post/e218aec5.html"/>
      <url>/post/e218aec5.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子弹类型枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BulletType</span><br><span class="line">&#123;</span><br><span class="line">    DirectAttack = <span class="number">0</span>,  <span class="comment">// 直接攻击</span></span><br><span class="line">    Phony,             <span class="comment">// 假子弹</span></span><br><span class="line">    Real,              <span class="comment">// 真子弹</span></span><br><span class="line">    Track,             <span class="comment">// 追踪子弹</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 可序列化</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bullet</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bullet 类直接继承自 ScriptableObject</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子弹类型</span></span><br><span class="line">    <span class="keyword">public</span> BulletType bulletType = BulletType.DirectAttack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子弹速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> speed = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 伤害数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子弹关联的特效</span></span><br><span class="line">    <span class="keyword">public</span> GameObject effectObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zxing二维码生成和读取</title>
      <link href="/post/41ee7e1f.html"/>
      <url>/post/41ee7e1f.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> ZXing;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QRCodeTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> RawImage cameraTeture;</span><br><span class="line">    <span class="keyword">public</span> RawImage QRcode;</span><br><span class="line">    <span class="keyword">public</span> Text text;</span><br><span class="line">    <span class="keyword">private</span> WebCamTexture webCamTexture;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> time;</span><br><span class="line">    BarcodeReader barcodeReader;</span><br><span class="line">    BarcodeWriter barcodeWriter;</span><br><span class="line">    Color32[] data;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line">        <span class="comment">//除了256  其他不能正确显示</span></span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">        ShowQRcode(str, <span class="number">256</span>,<span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span> &#123;</span><br><span class="line">        <span class="comment">//time += Time.deltaTime;</span></span><br><span class="line">        <span class="comment">//if (time&gt;=3f)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    QR();</span></span><br><span class="line">        <span class="comment">//    time = 0;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取二维码</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">QR</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">     barcodeReader = <span class="keyword">new</span> BarcodeReader();</span><br><span class="line">        WebCamDevice[] devices = WebCamTexture.devices;</span><br><span class="line">        <span class="built_in">string</span> deviceName = devices[<span class="number">0</span>].name;</span><br><span class="line">        webCamTexture = <span class="keyword">new</span> WebCamTexture(deviceName,<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">        cameraTeture.texture = webCamTexture;</span><br><span class="line">        webCamTexture.Play();</span><br><span class="line">        data = webCamTexture.GetPixels32();</span><br><span class="line">        Result str= barcodeReader.Decode(data, webCamTexture.width,webCamTexture.height);</span><br><span class="line">        <span class="keyword">if</span> (str!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            text.text = str.Text;</span><br><span class="line">            Debug.Log(str.Text);          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成二维码</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShowQRcode</span>(<span class="params"><span class="built_in">string</span> str,<span class="built_in">int</span> width,<span class="built_in">int</span> height</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Texture2D t = <span class="keyword">new</span> Texture2D(width,height);</span><br><span class="line">         t.SetPixels32(GeneQRCode(str, width, height));</span><br><span class="line">        t.Apply();</span><br><span class="line">        QRcode.texture = t;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = t.EncodeToPNG();</span><br><span class="line">        SaveData(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Color32[] <span class="title">GeneQRCode</span>(<span class="params"><span class="built_in">string</span> formatStr,<span class="built_in">int</span> width,<span class="built_in">int</span> heught</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ZXing.QrCode.QrCodeEncodingOptions options = <span class="keyword">new</span> ZXing.QrCode.QrCodeEncodingOptions();</span><br><span class="line">        options.CharacterSet = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        options.Width = width;</span><br><span class="line">        options.Height = heught;</span><br><span class="line">        options.Margin = <span class="number">1</span>;</span><br><span class="line">        barcodeWriter = <span class="keyword">new</span> BarcodeWriter &#123; Format=ZXing.BarcodeFormat.QR_CODE,Options= options &#125;;</span><br><span class="line">      <span class="keyword">return</span>  barcodeWriter.Write(formatStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SaveData</span>(<span class="params"><span class="built_in">byte</span>[] bytes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = Application.dataPath + <span class="string">@&quot;/Tex.png&quot;</span>;</span><br><span class="line">        File.WriteAllBytes(path,bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UGUI实现打字机效果</title>
      <link href="/post/7379ae33.html"/>
      <url>/post/7379ae33.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypewriterEffect</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> charsPerSecond = <span class="number">0.2f</span>;<span class="comment">//打字时间间隔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> words;<span class="comment">//保存需要显示的文字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isActive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> timer;<span class="comment">//计时器</span></span><br><span class="line">    <span class="keyword">private</span> Text myText;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> currentPos=<span class="number">0</span>;<span class="comment">//当前打字位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line">        timer = <span class="number">0</span>;</span><br><span class="line">        isActive = <span class="literal">true</span>;</span><br><span class="line">        charsPerSecond = Mathf.Max (<span class="number">0.2f</span>,charsPerSecond);</span><br><span class="line">        myText = GetComponent&lt;Text&gt; ();</span><br><span class="line">        words = myText.text;</span><br><span class="line">        myText.text = <span class="string">&quot;&quot;</span>;<span class="comment">//获取Text的文本信息，保存到words中，然后动态更新文本显示内容，实现打字机的效果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span> &#123;</span><br><span class="line">        OnStartWriter ();</span><br><span class="line">        <span class="comment">//Debug.Log (isActive);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartEffect</span>()</span>&#123;</span><br><span class="line">        isActive = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 执行打字任务</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnStartWriter</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isActive)&#123;</span><br><span class="line">            timer += Time.deltaTime;</span><br><span class="line">            <span class="keyword">if</span>(timer&gt;=charsPerSecond)&#123;<span class="comment">//判断计时器时间是否到达</span></span><br><span class="line">                timer = <span class="number">0</span>;</span><br><span class="line">                currentPos++;</span><br><span class="line">                myText.text = words.Substring (<span class="number">0</span>,currentPos);<span class="comment">//刷新文本显示内容</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(currentPos&gt;=words.Length) &#123;</span><br><span class="line">                    OnFinish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 结束打字，初始化数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnFinish</span>()</span>&#123;</span><br><span class="line">        isActive = <span class="literal">false</span>;</span><br><span class="line">        timer = <span class="number">0</span>;</span><br><span class="line">        currentPos = <span class="number">0</span>;</span><br><span class="line">        myText.text = words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity平台路径</title>
      <link href="/post/adc70860.html"/>
      <url>/post/adc70860.html</url>
      
        <content type="html"><![CDATA[<p><strong>Unity3D各平台路径（包括手机内置存储路径、SD卡等等）</strong></p><p>  关于Unity3D在各平台上的路径问题，网上有好多的资料，如下是比较好的参考资料：</p><p>1、<a href="http://www.manew.com/thread-23491-1-1.html">http://www.manew.com/thread-23491-1-1.html</a></p><p>2、<a href="http://www.xuanyusong.com/archives/2656">http://www.xuanyusong.com/archives/2656</a></p><p>  这里我不详细解释和路径的用法，只把各个路径对应的位置和访问方式总结一下。</p><h6 id="1、Resources路径"><a href="#1、Resources路径" class="headerlink" title="1、Resources路径"></a>1、Resources路径</h6><p>  Resources文件夹是Unity里自动识别的一种文件夹，可在Unity编辑器的Project窗口里创建，并将资源放置在里面。Resources文件夹下的资源不管是否有用，全部会打包进.apk或者.ipa，并且打包时会将里面的资源压缩处理。加载方法是Resources.Load<T>(文件名)，需要注意：文件名不包括扩展名，打包后不能更改Resources下的资源内容，但是从Resources文件夹中加载出来的资源可以更改。</p><h6 id="2、Application-dataPath路径"><a href="#2、Application-dataPath路径" class="headerlink" title="2、Application.dataPath路径"></a>2、Application.dataPath路径</h6><p>  这个属性返回的是程序的数据文件所在文件夹的路径，例如在Editor中就是项目的Assets文件夹的路径，通过这个路径可以访问项目中任何文件夹中的资源，但是在移动端它是完全没用。</p><h6 id="3、Application-streamingAssetsPath路径"><a href="#3、Application-streamingAssetsPath路径" class="headerlink" title="3、Application.streamingAssetsPath路径"></a>3、Application.streamingAssetsPath路径</h6><p>  这个属性用于返回流数据的缓存目录，返回路径为相对路径，适合设置一些外部数据文件的路径。在Unity工程的Assets目录下起一个名为“StreamingAssets”的文件夹即可，然后用Application.streamingAssetsPath访问，这个文件夹中的资源在打包时会原封不动的打包进去，不会压缩，一般放置一些资源数据。在PC&#x2F;MAC中可实现对文件的“增删改查”等操作，但在移动端是一个只读路径。</p><h6 id="4、Application-persistentDataPath路径（推荐使用）"><a href="#4、Application-persistentDataPath路径（推荐使用）" class="headerlink" title="4、Application.persistentDataPath路径（推荐使用）"></a>4、Application.persistentDataPath路径（推荐使用）</h6><p>  此属性返回一个持久化数据存储目录的路径，可以在此路径下存储一些持久化的数据文件。这个路径可读、可写，但是只能在程序运行时才能读写操作，不能提前将数据放入这个路径。在IOS上是应用程序的沙盒，可以被iCloud自动备份，可以通过同步推送一类的助手直接取出文件；在Android上的位置是根据Project Setting里设置的Write Access路径，可以设置是程序沙盒还是sdcard，注意：如果在Android设置保存在沙盒中，那么就必须root以后才能用电脑取出文件，因此建议写入sdcard里。一般情况下，建议将获得的文件保存在这个路径下，例如可以从StreamingAsset中读取的二进制文件或者从AssetBundle读取的文件写入PersistentDatapath。</p><h6 id="5、Application-temporaryCachePath路径"><a href="#5、Application-temporaryCachePath路径" class="headerlink" title="5、Application.temporaryCachePath路径"></a>5、Application.temporaryCachePath路径</h6><p>  此属性返回一个临时数据的缓存目录，跟Application.persistentDataPath类似，但是在IOS上不能被自动备份。</p><h6 id="6、-x2F-sdcard-x2F-路径"><a href="#6、-x2F-sdcard-x2F-路径" class="headerlink" title="6、&#x2F;sdcard&#x2F;..路径"></a>6、&#x2F;sdcard&#x2F;..路径</h6><p>  表示Android手机的SD卡根目录。</p><h6 id="7、-x2F-storage-x2F-emulated-x2F-0-x2F-路径（这个路径我查找了好久……）"><a href="#7、-x2F-storage-x2F-emulated-x2F-0-x2F-路径（这个路径我查找了好久……）" class="headerlink" title="7、&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;..路径（这个路径我查找了好久……）"></a>7、&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;..路径（这个路径我查找了好久……）</h6><p>  表示Android手机的内置存储根目录。</p><p>  以上各路径中的资源加载方式都可以用WWW类加载，但要注意各个平台路径需要加的访问名称，例如Android平台的路径前要加”jar:file:&#x2F;&#x2F;“，其他平台使用”file:&#x2F;&#x2F;“。以下是各路径在各平台中的具体位置信息：</p><p>  Android平台</p><p>Application.dataPath :  &#x2F;data&#x2F;app&#x2F;xxx.xxx.xxx.apk</p><p>Application.streamingAssetsPath :  jar:file:&#x2F;&#x2F;&#x2F;data&#x2F;app&#x2F;xxx.xxx.xxx.apk&#x2F;!&#x2F;assets</p><p>Application.persistentDataPath :  &#x2F;data&#x2F;data&#x2F;xxx.xxx.xxx&#x2F;files</p><p>Application.temporaryCachePath :  &#x2F;data&#x2F;data&#x2F;xxx.xxx.xxx&#x2F;cache</p><p>  IOS平台</p><p>Application.dataPath :                    Application&#x2F;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x2F;xxx.app&#x2F;Data</p><p>Application.streamingAssetsPath : Application&#x2F;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x2F;xxx.app&#x2F;Data&#x2F;Raw</p><p>Application.persistentDataPath :    Application&#x2F;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x2F;Documents</p><p>Application.temporaryCachePath : Application&#x2F;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x2F;Library&#x2F;Caches</p><p>  Windows Web Player</p><p>Application.dataPath :  file:&#x2F;&#x2F;&#x2F;D:&#x2F;MyGame&#x2F;WebPlayer (即导包后保存的文件夹，html文件所在文件夹)</p><p>Application.streamingAssetsPath : </p><p>Application.persistentDataPath : </p><p>Application.temporaryCachePath : </p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除失效脚本</title>
      <link href="/post/27987b69.html"/>
      <url>/post/27987b69.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CleanUp</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;Edit/Cleanup Missing Scripts&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CleanupMissingScripts</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Selection.gameObjects.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> gameObject = Selection.gameObjects[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We must use the GetComponents array to actually detect missing components</span></span><br><span class="line">            <span class="keyword">var</span> components = gameObject.GetComponents&lt;Component&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create a serialized object so that we can edit the component list</span></span><br><span class="line">            <span class="keyword">var</span> serializedObject = <span class="keyword">new</span> SerializedObject(gameObject);</span><br><span class="line">            <span class="comment">// Find the component list property</span></span><br><span class="line">            <span class="keyword">var</span> prop = serializedObject.FindProperty(<span class="string">&quot;m_Component&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Track how many components we&#x27;ve removed</span></span><br><span class="line">            <span class="built_in">int</span> r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Iterate over all components</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; components.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Check if the ref is null</span></span><br><span class="line">                <span class="keyword">if</span> (components[j] == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// If so, remove from the serialized component array</span></span><br><span class="line">                    prop.DeleteArrayElementAtIndex(j - r);</span><br><span class="line">                    <span class="comment">// Increment removed count</span></span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Apply our changes to the game object</span></span><br><span class="line">            serializedObject.ApplyModifiedProperties();</span><br><span class="line">            <span class="comment">//这一行一定要加！！！</span></span><br><span class="line">            EditorUtility.SetDirty(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 动态加载prefab</title>
      <link href="/post/84cd7455.html"/>
      <url>/post/84cd7455.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object prefab = AssetDatabase.LoadAssetAtPath(<span class="string">&quot;Assets/Prefabs/Cube.prefab&quot;</span>, <span class="keyword">typeof</span>(GameObject));  GameObject cube = (GameObject)Instantiate(prefab);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVNTools</title>
      <link href="/post/26c59ab3.html"/>
      <url>/post/26c59ab3.html</url>
      
        <content type="html"><![CDATA[<p>代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SVNTools</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;Assets/SVN Update&quot;</span>, false, 0)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SvnUpdate</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            SVNCommand(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;Assets/SVN Commit&quot;</span>, false, 0)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SvnCommit</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            SVNCommand(<span class="string">&quot;commit&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SVNCommand</span>(<span class="params"><span class="built_in">string</span> command</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> path = <span class="string">&quot;Assets&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span>[] assetGuids = Selection.assetGUIDs;</span><br><span class="line">            <span class="keyword">if</span> (assetGuids != <span class="literal">null</span> &amp;&amp; assetGuids.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                path = <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; assetGuids.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> assetName = AssetDatabase.GUIDToAssetPath(assetGuids[i]);</span><br><span class="line">                    path += i &gt; <span class="number">0</span> ? <span class="string">&quot;*&quot;</span> + assetName : assetName;</span><br><span class="line">                    <span class="keyword">if</span> (assetName != <span class="string">&quot;Assets&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        path += <span class="string">&quot;*&quot;</span> + assetName + <span class="string">&quot;.meta&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                path += <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Process process = <span class="keyword">new</span> Process();</span><br><span class="line">                process.StartInfo.FileName = <span class="string">&quot;TortoiseProc.exe&quot;</span>;</span><br><span class="line">                process.StartInfo.Arguments = <span class="built_in">string</span>.Format(<span class="string">&quot;/command:&#123;0&#125; /path:&#123;1&#125;&quot;</span>, command, path);</span><br><span class="line">                process.Start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                UnityEngine.Debug.LogWarning(<span class="built_in">string</span>.Format(<span class="string">&quot;Execute SVN process failure, exception message: &#123;0&#125;&quot;</span>, exception.Message));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity调用Windows弹提示框</title>
      <link href="/post/b83d1b15.html"/>
      <url>/post/b83d1b15.html</url>
      
        <content type="html"><![CDATA[<p><strong>Unity调用Windows弹提示框</strong></p><p><strong>1.第一个脚本</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;<span class="comment">//调用外部库，需要引用命名空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 为了调用外部库脚本</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChinarMessage</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DllImport(<span class="string">&quot;User32.dll&quot;</span>, SetLastError = true, ThrowOnUnmappableChar = true, CharSet = CharSet.Auto)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">MessageBox</span>(<span class="params">IntPtr handle, String message, String title, <span class="built_in">int</span> type</span>)</span>;<span class="comment">//具体方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.第二个脚本</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System; <span class="comment">//引用命名空间下</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Windows消息框</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChinarWindowsMessage</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>      returnNumber; <span class="comment">//返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">            Button();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Button</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">           <span class="comment">//示例     </span></span><br><span class="line"> returnNumber = ChinarMessage.MessageBox(IntPtr.Zero, <span class="string">&quot;Chinar-0:返回值均：1&quot;</span>, <span class="string">&quot;确认&quot;</span>, <span class="number">0</span>);</span><br><span class="line">       print(returnNumber);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;说明</p><p>&#x2F;&#x2F;参数说明 第一个参数不变为 IntPtr.Zero,第二个参数 为中间现实内容,第三个参数为 标题,第四个参数为 类型</p><p>&#x2F;&#x2F;类型:0  按钮为一个确认按钮  显示为确认  返回值为   1</p><p>&#x2F;&#x2F;1   按钮为两个 确认,取消   返回值为1,2</p><p>&#x2F;&#x2F;2   按钮为三个 中止|重试|忽略  返回值为3,4,5</p><p>&#x2F;&#x2F;3   按钮为三个 是 | 否 | 取消  返回值为6,7,2</p><p>&#x2F;&#x2F;4   按钮为两个  是 | 否   返回值为6,7</p><p>&#x2F;&#x2F;5   按钮为两个  重试 | 取消 返回值为4,2</p><p>&#x2F;&#x2F;6   按钮为三个  取消 | 重试 | 继续   返回值为2,10,11      </p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占位文档</title>
      <link href="/post/c65f2f38.html"/>
      <url>/post/c65f2f38.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LineRenderer的使用</title>
      <link href="/post/9b5b2627.html"/>
      <url>/post/9b5b2627.html</url>
      
        <content type="html"><![CDATA[<p>核心代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LineRenderer  currentLine = go.AddComponent&lt;LineRenderer&gt;();</span><br><span class="line"></span><br><span class="line">currentLine.material = lineMaterial;<span class="comment">//材质设置</span></span><br><span class="line"></span><br><span class="line">currentLine.startWidth = paintSize;</span><br><span class="line"></span><br><span class="line"> currentLine.endWidth = paintSize;<span class="comment">//宽度设置</span></span><br><span class="line"></span><br><span class="line"> currentLine.startColor = paintColor:<span class="comment">//颜色设置</span></span><br><span class="line"></span><br><span class="line"> currentLine.endColor = paintColor;<span class="comment">//颜色设置</span></span><br><span class="line"></span><br><span class="line">currentLine.numCornerVertices = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Vector3&gt; positions = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line"></span><br><span class="line"> positions.Add(position);</span><br><span class="line"></span><br><span class="line"> currentLine.positionCount = positions.Count;</span><br><span class="line"></span><br><span class="line"> currentLine.SetPositions(positions.ToArray());<span class="comment">//加入点的集合</span></span><br><span class="line"></span><br><span class="line"> lastMousePostion = position;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工具网站</title>
      <link href="/post/f07c441.html"/>
      <url>/post/f07c441.html</url>
      
        <content type="html"><![CDATA[<h5 id="1-字体图标"><a href="#1-字体图标" class="headerlink" title="1.字体图标"></a>1.字体图标</h5><p>icomoon字库： <a href="http://icomoon.io/">http://icomoon.io</a></p><p>阿里icon font字库</p><p><a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></p><h5 id="2-移动端初始化样式："><a href="#2-移动端初始化样式：" class="headerlink" title="2.移动端初始化样式："></a>2.移动端初始化样式：</h5><p> <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><h5 id="3-less中文网"><a href="#3-less中文网" class="headerlink" title="3.less中文网"></a>3.less中文网</h5><p><a href="http://lesscss.cn/">http://lesscss.cn/</a></p><p>基于nodejs</p><p>安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>node -v 检测是否安装成功</p><p>vo</p><p>vscode Less 插件 easy less</p><h5 id="4-rem适配方案flexible-js"><a href="#4-rem适配方案flexible-js" class="headerlink" title="4.rem适配方案flexible.js"></a>4.rem适配方案flexible.js</h5><p>github地址：<a href="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible</a></p><p>VSCode px 转换rem 插件 cssrem</p><h5 id="5-bootstrap框架"><a href="#5-bootstrap框架" class="headerlink" title="5.bootstrap框架"></a>5.bootstrap框架</h5><p>中文官网：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a></p><p>官网：<a href="http://getbootstrap.com/">http://getbootstrap.com/</a></p><p> 推荐使用：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p><h5 id="6-fastclick-插件解决-移动端click事件300ms-延迟。-使用延时"><a href="#6-fastclick-插件解决-移动端click事件300ms-延迟。-使用延时" class="headerlink" title="6.fastclick 插件解决 移动端click事件300ms 延迟。 使用延时"></a>6.fastclick 插件解决 移动端click事件300ms 延迟。 使用延时</h5><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p><h5 id="7-Swiper-插件"><a href="#7-Swiper-插件" class="headerlink" title="7.Swiper 插件"></a>7.Swiper 插件</h5><p><a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p><h5 id="8-superslide："><a href="#8-superslide：" class="headerlink" title="8.superslide："></a>8.superslide：</h5><p> <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></p><p>iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></p><h5 id="9-jQuery"><a href="#9-jQuery" class="headerlink" title="9.jQuery"></a>9.jQuery</h5><p>官网地址： <a href="https://jquery.com/">https://jquery.com/</a></p><p> 1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</p><p> 2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</p><p> 3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p><p>各个版本的下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a></p><h5 id="10-jQuery-插件常用的网站："><a href="#10-jQuery-插件常用的网站：" class="headerlink" title="10.jQuery 插件常用的网站："></a>10.jQuery 插件常用的网站：</h5><p>​        jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </p><p>​        jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </p><h5 id="11-前端常用的框架"><a href="#11-前端常用的框架" class="headerlink" title="11.前端常用的框架"></a>11.前端常用的框架</h5><p>有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p><p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p><h5 id="12-jqueryui"><a href="#12-jqueryui" class="headerlink" title="12.jqueryui"></a>12.jqueryui</h5><p><a href="https://jqueryui.com/">https://jqueryui.com/</a></p><h5 id="13-jquery-mousewheel"><a href="#13-jquery-mousewheel" class="headerlink" title="13.jquery mousewheel"></a>13.jquery mousewheel</h5><p><a href="https://plugins.jquery.com/mousewheel/">https://plugins.jquery.com/mousewheel/</a></p><h5 id="14-模板引擎"><a href="#14-模板引擎" class="headerlink" title="14.模板引擎"></a>14.模板引擎</h5><p><a href="http://aui.github.io/art-template/zh-cn/docs/installation.html">http://aui.github.io/art-template/zh-cn/docs/installation.html</a></p><h5 id="15-hfs-httpfileserver文件服务器"><a href="#15-hfs-httpfileserver文件服务器" class="headerlink" title="15.hfs httpfileserver文件服务器"></a>15.hfs httpfileserver文件服务器</h5><p><a href="https://www.rejetto.com/">https://www.rejetto.com/</a></p><h5 id="16-git"><a href="#16-git" class="headerlink" title="16.git"></a>16.git</h5><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h5 id="17-图片裁剪工具-cropper"><a href="#17-图片裁剪工具-cropper" class="headerlink" title="17.图片裁剪工具 cropper"></a>17.图片裁剪工具 cropper</h5><p><a href="https://github.com/fengyuanchen/cropperjs">https://github.com/fengyuanchen/cropperjs</a></p><h5 id="18-tinymce-富文本编辑插件"><a href="#18-tinymce-富文本编辑插件" class="headerlink" title="18.tinymce 富文本编辑插件"></a>18.tinymce 富文本编辑插件</h5><p><a href="http://tinymce.ax-z.cn/download-all.php">http://tinymce.ax-z.cn/download-all.php</a> 中文文档</p><p><a href="https://www.bootcdn.cn/tinymce/%E5%9B%BD%E5%86%85%E7%BD%91%E7%AB%99">https://www.bootcdn.cn/tinymce/国内网站</a></p><p><a href="https://www.tiny.cloud/get-tiny/">https://www.tiny.cloud/get-tiny/</a> 国外网站</p><h5 id="19-layui官网"><a href="#19-layui官网" class="headerlink" title="19.layui官网"></a>19.layui官网</h5><p><a href="https://www.layuion.com/">https://www.layuion.com/</a></p><h5 id="20-nodejs-官网"><a href="#20-nodejs-官网" class="headerlink" title="20.nodejs 官网"></a>20.nodejs 官网</h5><p><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h5 id="21-Express-框架-快速构建web应用"><a href="#21-Express-框架-快速构建web应用" class="headerlink" title="21.Express 框架 快速构建web应用"></a>21.Express 框架 快速构建web应用</h5><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><h5 id="22-Electron框架-构建跨平台的桌面应用"><a href="#22-Electron框架-构建跨平台的桌面应用" class="headerlink" title="22.Electron框架 构建跨平台的桌面应用"></a>22.Electron框架 构建跨平台的桌面应用</h5><p><a href="https://www.electronjs.org/">https://www.electronjs.org/</a></p><h5 id="23-restify框架-快速构建api接口项目"><a href="#23-restify框架-快速构建api接口项目" class="headerlink" title="23.restify框架 快速构建api接口项目"></a>23.restify框架 快速构建api接口项目</h5><p><a href="http://restify.com/">http://restify.com/</a></p><h5 id="24-npm-官方网站-检索包"><a href="#24-npm-官方网站-检索包" class="headerlink" title="24.npm 官方网站 检索包"></a>24.npm 官方网站 检索包</h5><p><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p><p><a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> 下载包</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#的序列化反序列化</title>
      <link href="/post/b356ea04.html"/>
      <url>/post/b356ea04.html</url>
      
        <content type="html"><![CDATA[<p>​C#的序列化我总结了两种，一种是xml序列化，另一种是二进制序列化。</p><h4 id="1-xml序列化和反序列化"><a href="#1-xml序列化和反序列化" class="headerlink" title="1.xml序列化和反序列化"></a>1.xml序列化和反序列化</h4><p>​xml序列化需要引入命名空间System.Xml.Serialization，先新建一个工具类</p><p>Tools.cs，加入序列化和反序列化的方法。</p><p>Tools.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">#<span class="keyword">region</span> Xml序列化和反序列化(需要序列化的类需要添加[Serializable]标记)</span></span><br><span class="line">      <span class="comment">//保存的路径</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> baseXmlPath = System.Environment.CurrentDirectory+<span class="string">&quot;/data.xml&quot;</span>;</span><br><span class="line"><span class="comment">//序列化保存数据方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">XmlSaveData</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">using</span> (Stream stream=<span class="keyword">new</span> FileStream(baseXmlPath, FileMode.OpenOrCreate,FileAccess.Write))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">using</span> (StreamWriter sw=<span class="keyword">new</span> StreamWriter(stream))</span><br><span class="line">              &#123;</span><br><span class="line">                  XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">                  xmlSerializer.Serialize(sw,obj);</span><br><span class="line">                  Console.WriteLine(baseXmlPath + <span class="string">&quot;文件序列化成功&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">//反序列化获取数据方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">XmlGetData</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">object</span> obj = <span class="keyword">new</span> Student();</span><br><span class="line">          <span class="keyword">using</span> (Stream stream = <span class="keyword">new</span> FileStream(baseXmlPath, FileMode.Open, FileAccess.Read))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(stream,<span class="literal">true</span>))</span><br><span class="line">              &#123;</span><br><span class="line">                  XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(obj.GetType());</span><br><span class="line">                  obj = (Student)xmlSerializer.Deserialize(sr);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> obj;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><p>​接着创建一个数据类DataInfo.cs,创建要序列化的数据类Student,记得序列化的类前加入[Serializable]标记</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Grade &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​最后在Program进行测试</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SaveStudent();</span><br><span class="line">    GetStudent();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SaveStudent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">        Age = <span class="string">&quot;18&quot;</span>,</span><br><span class="line">        Grade=<span class="string">&quot;60&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Tools.XmlSaveData(student);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetStudent</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Student student = (Student)Tools.XmlGetData();</span><br><span class="line">    Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;学生的名字为&#123;0&#125;,年龄为&#123;1&#125;,成绩为&#123;2&#125;&quot;</span>,student.Name,student.Age,student.Grade));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​顺利输出，说明测试成功。</p><h4 id="2-二进制序列化和反序列化"><a href="#2-二进制序列化和反序列化" class="headerlink" title="2.二进制序列化和反序列化"></a>2.二进制序列化和反序列化</h4><p>​二进制序列化需要引入命名空间using System.Runtime.Serialization.Formatters.Binary，在工具类中加入序列化和反序列化的方法。</p><p>Tools.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 二进制序列化和反序列化(需要序列化的类需要添加[Serializable]标记)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> baseBytePath = System.Environment.CurrentDirectory + <span class="string">&quot;/data.txt&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ByteSaveData</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (Stream stream = <span class="keyword">new</span> FileStream(baseBytePath, FileMode.OpenOrCreate, FileAccess.Write))</span><br><span class="line">    &#123;</span><br><span class="line">        BinaryFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">        formatter.Serialize(stream, obj);</span><br><span class="line">        Console.WriteLine(baseBytePath + <span class="string">&quot;文件序列化成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">ByteGetData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">object</span> obj = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">using</span> (Stream stream = <span class="keyword">new</span> FileStream(baseBytePath, FileMode.Open, FileAccess.Read))</span><br><span class="line">    &#123;</span><br><span class="line">        BinaryFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">        obj = formatter.Deserialize(stream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><p>​接着继续在DataInfo.cs中创建一个数据类Person</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Sex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      最后在Program中测试</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    SavePerson();</span><br><span class="line">    GetPerson();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SavePerson</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person()</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">        Age=<span class="string">&quot;15&quot;</span>,</span><br><span class="line">        Sex=<span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Tools.ByteSaveData(person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetPerson</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person person = (Person)Tools.ByteGetData();</span><br><span class="line">    Console.WriteLine(<span class="built_in">string</span>.Format(<span class="string">&quot;人物的名字为&#123;0&#125;,年龄为&#123;1&#125;,性别为&#123;2&#125;&quot;</span>, person.Name, person.Age, person.Sex));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  测试，顺利输出</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
